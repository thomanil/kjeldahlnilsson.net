<?xml version="1.0" encoding="utf-8"?>
<!--
- phpMyAdmin XML Dump
- version 3.4.9
- http://www.phpmyadmin.net
-
- Host: localhost
- Generation Time: Aug 21, 2012 at 06:38 PM
- Server version: 5.1.63
- PHP Version: 5.2.17
-->

<pma_xml_export version="1.0" xmlns:pma="http://www.phpmyadmin.net/some_doc_url/">
    <!--
    - Structure schemas
    -->
    <pma:structure_schemas>
        <pma:database name="ninjasti_wrdp1" collation="utf8_general_ci" charset="utf8">
            <pma:table name="wp_posts">
                CREATE TABLE `wp_posts` (
                  `ID` bigint(20) unsigned NOT NULL AUTO_INCREMENT,
                  `post_author` bigint(20) unsigned NOT NULL DEFAULT '0',
                  `post_date` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
                  `post_date_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
                  `post_content` longtext NOT NULL,
                  `post_title` text NOT NULL,
                  `post_category` int(4) NOT NULL DEFAULT '0',
                  `post_excerpt` text NOT NULL,
                  `post_status` varchar(20) NOT NULL DEFAULT 'publish',
                  `comment_status` varchar(20) NOT NULL DEFAULT 'open',
                  `ping_status` varchar(20) NOT NULL DEFAULT 'open',
                  `post_password` varchar(20) NOT NULL DEFAULT '',
                  `post_name` varchar(200) NOT NULL DEFAULT '',
                  `to_ping` text NOT NULL,
                  `pinged` text NOT NULL,
                  `post_modified` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
                  `post_modified_gmt` datetime NOT NULL DEFAULT '0000-00-00 00:00:00',
                  `post_content_filtered` text NOT NULL,
                  `post_parent` bigint(20) unsigned NOT NULL DEFAULT '0',
                  `guid` varchar(255) NOT NULL DEFAULT '',
                  `menu_order` int(11) NOT NULL DEFAULT '0',
                  `post_type` varchar(20) NOT NULL DEFAULT 'post',
                  `post_mime_type` varchar(100) NOT NULL DEFAULT '',
                  `comment_count` bigint(20) NOT NULL DEFAULT '0',
                  PRIMARY KEY (`ID`),
                  KEY `post_name` (`post_name`),
                  KEY `type_status_date` (`post_type`,`post_status`,`post_date`,`ID`),
                  KEY `post_parent` (`post_parent`),
                  KEY `post_author` (`post_author`)
                ) ENGINE=MyISAM AUTO_INCREMENT=1540 DEFAULT CHARSET=latin1;
            </pma:table>
        </pma:database>
    </pma:structure_schemas>

    <!--
    - Database: 'ninjasti_wrdp1'
    -->
    <database name="ninjasti_wrdp1">
        <!-- Table wp_posts -->
        <table name="wp_posts">
            <column name="ID">3</column>
            <column name="post_author">1</column>
            <column name="post_date">2006-05-23 23:58:49</column>
            <column name="post_date_gmt">2006-05-23 22:58:49</column>
            <column name="post_content">I was recently dropped into a project which has been running for while. After digging into the code and documentation I started thinking about just that process: what are the most effective ways of getting up to speed in an unfamiliar project?

Few projects employ the complete UML arsenal of documentation... so once you've skimmed the (usually incomplete) documentation, you have to actually start digging. Some ways of doing this, in no particular order:
&lt;ul&gt;
	&lt;li&gt;Run through the unit tests of the most vital parts of the code. Pull out as much information as possible. Turn up log levels, add trace statements if few or none exist. You can save time by using &lt;a href=&quot;http://en.wikipedia.org/wiki/Aspect_oriented_programming&quot;&gt;AOP&lt;/a&gt; mechanisms to weave in tracing.&lt;/li&gt;
	&lt;li&gt;Start fixing existing bugs quickly... but carefully (if test coverage is low).&lt;/li&gt;
	&lt;li&gt;Fix broken unit tests. Improve test coverage, code some &quot;learning tests&quot;.&lt;/li&gt;
	&lt;li&gt;Use tools to visualize the project. A tool like &lt;a href=&quot;http://www.ggtools.net/grand/&quot;&gt;Grand&lt;/a&gt; is invaluable when digging through an unfamiliar Ant build script.&lt;/li&gt;
	&lt;li&gt;Use tools that analyze code quality and the general project integrity. Some things can be determined quantitatively: test coverage, code duplication and such. Tools like &lt;a href=&quot;http://xradar.sourceforge.net/&quot;&gt;XRadar&lt;/a&gt; can spot these things for you.You'll learn while digging through this information, and hopefully be better armed to improve the project when you start writing your own code. Also, if you are able to do it tactfully without stepping on any toes, offer to refactor any especially weak areas.&lt;/li&gt;
	&lt;li&gt;Unless you are the sole developer, &lt;a href=&quot;http://extremeprogramming.org/rules/pair.html&quot;&gt;pair up &lt;/a&gt;with one of the others. You drive and the (within the project context) more experienced developer navigates.&lt;/li&gt;
	&lt;li&gt; If pairing isn't an option, get short and focused one-on-one braindumps from other people in the project. Pull up some important and/or complicated use cases, and step through their actual code together. &lt;a href=&quot;http://en.wikipedia.org/wiki/Mind_map/&quot;&gt;Mindmaps&lt;/a&gt; are great for taking notes (&lt;a href=&quot;http://freemind.sourceforge.net/wiki/index.php/Main_Page&quot;&gt;Freemind&lt;/a&gt; is a good open source mindmapping program). When using mind maps you are (well, at least I am) more able to organize your thoughts in a tree structure. Branches can be nested, folded and rearranged quickly - this is great because you'll probably bounce around different concepts quickly while walking through the code; &quot;Oh yeah, I almost forgot, you should know [fact X] about [class Y that we covered 5 minutes ago]....&quot;&lt;/li&gt;
	&lt;li&gt;Improve documentation. This is a good learning excercise if there are vital areas in the project which are completely void of documentation. Boring, but forces you to understand the things you are describing.&lt;/li&gt;
&lt;/ul&gt;
I probably forgot a bunch of stuff here. I implore any visitors to add more in the comment section. :)</column>
            <column name="post_title">Hitting the ground running... faster</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">hitting-the-ground-running-faster</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2009-04-02 06:53:52</column>
            <column name="post_modified_gmt">2009-04-02 05:53:52</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=3</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">8</column>
            <column name="post_author">1</column>
            <column name="post_date">2007-05-12 00:30:17</column>
            <column name="post_date_gmt">2007-05-11 22:30:17</column>
            <column name="post_content">I'm changing a few things about this blog.

&lt;strong&gt;First; &lt;/strong&gt;new blogging software. The last setup had no spam protection of any sort, so I ended up with 50+ spam comments under every post within weeks. I ended up just trashing the old blog and installing a new one, powered by &lt;a href=&quot;http://wordpress.com/&quot;&gt;Wordpress&lt;/a&gt;. Will be interesting to see how effective the Akismet plugin is against spam comments...

&lt;strong&gt;Secondly; &lt;/strong&gt;I'm adjusting the scope of my posts wee bit. Originally I wanted to use this blog exclusively for work and development-related stuff. That didn't really work, for two reasons. At my last &lt;a href=&quot;http://www.ergogroup.no&quot;&gt;job &lt;/a&gt;I ended up writing most of my software development posts on the internal blog of my employer. I've also found that my enthusiasm for writing about strictly work-related stuff on my spare time isn't constant, but rather waning and waxing over time.

So from now on I'll use the blog to prattle on about things both work-related and otherwise. Hopefully this'll motivate me to trickle out more regular posts... well, maybe. We'll see.

&lt;strong&gt;Finally&lt;/strong&gt;; I reposted the few posts that did make it into the old blog.

</column>
            <column name="post_title">Blog reboot</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">blog-reboot</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2007-05-12 02:04:47</column>
            <column name="post_modified_gmt">2007-05-12 00:04:47</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=8</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">4</column>
            <column name="post_author">1</column>
            <column name="post_date">2006-05-26 23:58:51</column>
            <column name="post_date_gmt">2006-05-26 22:58:51</column>
            <column name="post_content">What's more geeky than obsessing over backup schemes on your home computer?
*drumroll*

Setting up version control at home!

I recently decided to start using &lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;Subversion&lt;/a&gt; for version control of files on my home desktops.
I got the idea after switching to &lt;a href=&quot;http://www.site5.com/&quot;&gt;Site5&lt;/a&gt; as host for my home domain. Their knowledge base references some &lt;a href=&quot;http://www.julianyap.com/wiki/index.php?title=Subversion_on_Site5&quot;&gt;handy&lt;/a&gt; &lt;a href=&quot;http://forums.site5.com/showthread.php?t=7348&amp;amp;highlight=svn&quot;&gt;howto&lt;/a&gt; files for setting up an ssh-accessible svn repository at their servers. Neat.

What I basically did:
&lt;ul&gt;
	&lt;li&gt;Got ssh access to my site5 domain&lt;/li&gt;
	&lt;li&gt;Set up a repository on the domain&lt;/li&gt;
	&lt;li&gt;Installed subversion via &lt;a href=&quot;http://darwinports.opendarwin.org/&quot;&gt;Darwin Ports&lt;/a&gt; on my Mac&lt;/li&gt;
	&lt;li&gt;Added my home projects and miscellaneous files to the repository&lt;/li&gt;
	&lt;li&gt;Played around with svn in the Terminal.&lt;/li&gt;
&lt;/ul&gt;
I'm quite keen on knowing how to do things on the command line, but opening a terminal and typing &lt;code&gt;svn commit --message &quot;Commited change X in file Y&quot;&lt;/code&gt; gets old quickly. So onto a GUI app we go. &lt;a href=&quot;http://scplugin.tigris.org/&quot;&gt;Scplugin&lt;/a&gt; is a nice open source svn client that integrates into the Finder in OS X, a la &lt;a href=&quot;http://tortoisesvn.tigris.org/&quot;&gt;Tortoise SVN&lt;/a&gt; on Windows.

Screenshot:

&lt;a title=&quot;svnScreenshot&quot; href=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2007/05/svn_01.jpg&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2007/05/svn_01.thumbnail.jpg&quot; alt=&quot;svnScreenshot&quot; /&gt;&lt;/a&gt;

Presto! Off-site (off-continent, actually!) backups, more controllable retrieval of backups and older versions, ability to check out and work on my home projects anywhere. Now to convince my girlfriend to commit her files regularly, too...</column>
            <column name="post_title">Subversion@home</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">subversionhome</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2009-04-02 06:54:16</column>
            <column name="post_modified_gmt">2009-04-02 05:54:16</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=4</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">6</column>
            <column name="post_author">1</column>
            <column name="post_date">2006-06-03 20:58:52</column>
            <column name="post_date_gmt">2006-06-03 19:58:52</column>
            <column name="post_content">&lt;p class=&quot;storycontent&quot;&gt;&lt;strong&gt; &lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;storycontent&quot;&gt;Attended a seminar held by Scott Ambler at &lt;a href=&quot;http://bouvet.no/&quot;&gt;Bouvet&lt;/a&gt; this tuesday. I saw him at &lt;a href=&quot;http://www.javapolis.com/&quot;&gt;Javapolis&lt;/a&gt; last fall, so a fair bit of the material was pure repetition - but he's still a very inspiring guy. Agile methods, modelling and database techniques galore, not to mention a fair bit of ranting about traditional software development in general and dba people in particular.&lt;/p&gt;

The basic message was this: &lt;strong&gt;Developers should learn more about database stuff, db people should learn more about object oriented development, and &lt;em&gt;everyone&lt;/em&gt; should learn more about agile methodology.&lt;/strong&gt;

Good stuff, highly recommended. Check his &lt;a href=&quot;http://www.ambysoft.com/&quot;&gt;site&lt;/a&gt;, there's a ton of material there!

This is what I'd like to see, though: a similar Ambler seminar, but geared towards an audience of both developers and db guys, the theme being something along the lines of &quot;poking holes in the cultural walls between developers and database administrators&quot; Only with a better title. I did suggest this to the organizers. Fingers crossed!

And finally, I picked up a neat new expression this week (probably from some blog at the &lt;a href=&quot;http://butunclebob.com/&quot;&gt; Uncle Bob&lt;/a&gt; site. Not able to retrieve the post in question now though).

&lt;strong&gt;&lt;em&gt;&quot;Ending the day on a cliffhanger&quot;&lt;/em&gt;&lt;/strong&gt; : The act of reaching some seemingly insurmountable coding problem at the end of a work day... only to leave it, come back fresh the next morning and have it dissolve like morning mist.

Gotta love it when that happens... and now I have a snappy expression for it!</column>
            <column name="post_title">Scott Ambler, cliffhangers</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">scott-ambler-cliffhangers</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2009-04-02 06:54:39</column>
            <column name="post_modified_gmt">2009-04-02 05:54:39</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=6</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">7</column>
            <column name="post_author">1</column>
            <column name="post_date">2006-06-21 23:58:54</column>
            <column name="post_date_gmt">2006-06-21 22:58:54</column>
            <column name="post_content">&lt;strong&gt; &lt;/strong&gt;

I spent this afternoon playing with &lt;a href=&quot;http://fitnesse.org/&quot;&gt;Fitnesse&lt;/a&gt;. Fitnesse is an acceptance testing framework developed by some of the people behind the &lt;a href=&quot;http://butunclebob.com/&quot;&gt;Uncle Bob&lt;/a&gt; website.

Using it for acceptance testing, getting customers to write tests in excel etc sounds very nice... but we only use it for integration testing (and by extension, implicit documentation of our different server environments). And it works very well for this!

&lt;strong&gt;Pros&lt;/strong&gt;: It's very easy to set up and get started with.
&lt;strong&gt;Cons&lt;/strong&gt;: The documentation could be a lot better in certain spots. Prepare to do a lot of hunting through minimalistic wiki doc pages in the beginning...</column>
            <column name="post_title">Fitnesse!</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">fitnesse</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2009-04-02 06:54:55</column>
            <column name="post_modified_gmt">2009-04-02 05:54:55</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=7</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">9</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-04-24 19:03:54</column>
            <column name="post_date_gmt">2008-04-24 17:03:54</column>
            <column name="post_content">I'm nowhere near as good a programmer as I should be.

I'm not &lt;strong&gt;terrible&lt;/strong&gt; - just a bit off from where I should be.

What actually made this hit home was, initially, some of the job interviews I went through last year. I did get offers from all the companies I interviewed at. Maybe this isn't saying much given how crazy&lt;strong&gt; &lt;/strong&gt;the IT job market has been for the last few years... or am I actually &lt;a href=&quot;http://www.codinghorror.com/blog/archives/000781.html&quot;&gt;ahead of a bunch of really terrible programmers&lt;/a&gt;? Now there's a scary thought for you!

Anyway, some of the more hardball interview questions did give me a clear sense of some areas I'm weak, rusty or just plain ignorant in. Later on I got an additional wakeup call from &lt;a href=&quot;http://steve.yegge.googlepages.com/five-essential-phone-screen-questions&quot;&gt;this blog post&lt;/a&gt;. Go on, go read it right now.

Some consider Steve Yegges idea of a phone screen (or job interview) somewhat harsh. However, you should &lt;strong&gt;know &lt;/strong&gt;this stuff if you consider yourself a professional developer. The article painfully reminded me of all the stuff I've either A) forgotten or B) simply never bothered to learn.

So, resolution time. I'm going to pick a few areas that I need to improve in initially, and I'll try to invest at least a few hours each week (outside of work). My current todo list:
&lt;ul&gt;
	&lt;li&gt;Learn &lt;a href=&quot;http://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; properly. I never bothered to master a scripting language, though I've dabbled in Ruby and Perl before. And I should take the opportunity to become more proficient with &lt;a href=&quot;http://www.amazon.com/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1207950991&amp;amp;sr=1-1&quot;&gt;regular expressions&lt;/a&gt; while I'm at it.&lt;/li&gt;
	&lt;li&gt;Learn a &lt;a href=&quot;http://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;programming language, at least enough to feel more familiar and comfortable with that paradigm. I've worked with people who are fond of &lt;a href=&quot;http://paulgraham.com/rootsoflisp.html&quot;&gt;Lisp&lt;/a&gt;, and it clearly showed in their Java code. In a good way.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Basic-Mathematics-Serge-Lang/dp/0387967877/ref=pd_bbs_7?ie=UTF8&amp;amp;s=books&amp;amp;qid=1207950516&amp;amp;sr=8-7&quot;&gt;Brush up&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;on my &lt;a href=&quot;http://www.amazon.com/Mathematical-Methods-Physical-Sciences-Mary/dp/0471198269/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1207950584&amp;amp;sr=1-1&quot;&gt;math skills&lt;/a&gt;. I was never a very inspired math student in school, but I'm continuing to find that I really should've focused more on that.&lt;/li&gt;
&lt;/ul&gt;
Time to polish the rust and sharpen the blade.</column>
            <column name="post_title">Polishing Rust</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">polishing-rust</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2008-04-24 19:08:33</column>
            <column name="post_modified_gmt">2008-04-24 17:08:33</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=9</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">1</column>
        </table>
        <table name="wp_posts">
            <column name="ID">78</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:29:16</column>
            <column name="post_date_gmt">2009-01-28 19:29:16</column>
            <column name="post_content">&lt;em&gt;Part &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, 8&lt;/em&gt;

This was a fun project! Time to wrap it up...

&lt;strong&gt;What did I take away from all this?&lt;/strong&gt;

Well, putting together the game (and these blog posts) helped me achieve my goal: I've got a better grip on core Javascript syntax and idioms now. I find I actually like working in the language. It's very flexible, mainly because of its functional aspects and malleable Prototype object system. Ruby is still a more pleasant alternative, though. :)

Development is rapid... as long as I use disciplined regression tests. This is key - the only reason I was able to code (and constantly refactor) this little project relatively quickly was the constant safety net of my tests. Refreshing the browser and quickly hopping through the visual tests took about 10 secs each time, making for fairly rapid dev cycles.

I ended up with a basic but effective dev environment for dynamic web apps. I'm planning on extracting a stripped down template for future projects (with some improvements, see below).

Finally, rapidly building something concrete and visual is a rewarding feeling in and of itself... even for a trivial toy like my dinky little game.

&lt;strong&gt;Room for improvement&lt;/strong&gt;

There are, apart from the myriad candidates for refactoring, some major issues to consider in the finished product as it stands now.

More of the code could be programmatically testdriven. For instance, much of the collision detection and state handling of Piece and Field could be tested and developed without relying on manual, visual tests. I managed without extensive unit tests here, however if the project had been a less trivial one I probably would've been more rigorous.

Piece shape matrices could be expressed in a more compact way if I'd defined each shape once, then used matrix rotation on them as needed. Unfortunately my math is a wee bit rusty, so I opted for &quot;readability&quot; instead. ;)

My use of OOP in this project could be a bit more disciplined. I reach right inside the&lt;strong&gt; Field&lt;/strong&gt; and &lt;strong&gt;Piece&lt;/strong&gt; objects and grab their state variables - so much for encapsulation, eh? I should've defined accessor functions, using &lt;a title=&quot;Closure and private members&quot; href=&quot;http://javascript.crockford.com/private.html&quot; target=&quot;_blank&quot;&gt;closures&lt;/a&gt; to hide the actual state variables (this didn't really occur to me until I was close to finishing the project).

Also, all the code should be hidden within the Quicktetris object (our application namespace). One of the quirks of Javascript is its notion of &lt;strong&gt;linkage through global variables&lt;/strong&gt; - every library, function and general flotsam of Javascript code loaded in the current browser window ends up in the the same global namespace. Given the possible amount of library code that a serious application can load, our generic &lt;strong&gt;Test&lt;/strong&gt;, &lt;strong&gt;Piece&lt;/strong&gt;, &lt;strong&gt;Field &lt;/strong&gt;, &lt;strong&gt;Graphics&lt;/strong&gt; names could easily trigger naming conflicts.

How much thought did I put into &lt;strong&gt;performance&lt;/strong&gt;? Nada. Zip. It loads fast enough, and runs fairly smoothly on my laptop. Works for me. However, if general web application performance was more of a concern I'd probably look into some of the most obvious remedies:
&lt;ul&gt;
	&lt;li&gt;Compression of the javascript code. All that generous whitespace adds to the size of the transmitted script.&lt;/li&gt;
	&lt;li&gt;Concatenating all javascript into one .js file to avoid overhead of multiple http requests&lt;/li&gt;
	&lt;li&gt;Compressing the image and sound assets. Lower bitrate for sound, reduced color debth for images&lt;/li&gt;
	&lt;li&gt;Using &lt;a href=&quot;http://developer.yahoo.com/yslow/&quot;&gt;YSlow&lt;/a&gt; to profile and suggest further performance tweaks&lt;/li&gt;
&lt;/ul&gt;
Using straight DOM scripting combined with styled div elements works for our game. Every visual element is nice and rectangular; because of this we don't need more organic functionality such as lines, circles and curves. More flexible graphics would probably have called for a different approach. There are a few ways of doing this. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Canvas_(HTML_element)&quot;&gt;canvas approach&lt;/a&gt; is one, &lt;a href=&quot;http://www.mozilla.org/projects/svg/&quot;&gt;SVG based graphics&lt;/a&gt; another. Unfortunately, Internet Explorer doesn't support either of them out of the box (without installing third party extensions).
&lt;div&gt;

&lt;strong&gt;Time spent&lt;/strong&gt;

The code didn't initially leap out in clean increments, as suggested throughout these blog posts. Being a relative newbie to serious Javascript development, I went through quite a few iterations - refactoring the code as I learned more.

Finishing the basic gameplay mechanics took roughly one week, using spare time in evenings and over the weekend. Improved graphics, animation, refactoring and general cleanup was finished after another week. Planning and preparing for this series of companion blog posts added overhead to the whole process.&lt;/div&gt;
&lt;div&gt;

&lt;strong&gt;Tools used:&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a title=&quot;Firebug&quot; href=&quot;http://getfirebug.com/&quot; target=&quot;_blank&quot;&gt;Firebug&lt;/a&gt; is an absolute must for debugging Javascript code, enabling you to set breakpoints, step through the code, inspect DOM/CSS/script state at all times... One particularly handy feature it offers is its text console - &lt;strong&gt;console.log()&lt;/strong&gt; is so much nicer for debugging than the old school practice of dumping debug messages in a dialog box with &lt;strong&gt;alert()&lt;/strong&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://www.jslint.com/&quot;&gt;JSLint&lt;/a&gt; is, as previously mentioned, the closest you'll get to compiling your Javascript (for now). It checks code for typical Javascript code smells. Like the author of the tool states: &lt;em&gt;&quot;JSLint will hurt your feelings&quot;&lt;/em&gt;.&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;Rake tutorial&quot; href=&quot;http://www.railsenvy.com/2007/6/11/ruby-on-rails-rake-tutorial&quot;&gt;Rake&lt;/a&gt; is my preferred build tool. Writing procedural build scripts in Ruby is very expressive, fast and readable, especially compared to certain other &lt;a title=&quot;Ant&quot; href=&quot;http://ant.apache.org/&quot;&gt;xml-based&lt;/a&gt;, declarative &lt;a title=&quot;Maven&quot; href=&quot;http://maven.apache.org/&quot;&gt;monstrosities&lt;/a&gt;. :)&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://elfz.laacz.lv/beautify/&quot;&gt;Beautify Javascript&lt;/a&gt; is a handy online tool for prettifying snippets of Javascript code.&lt;/li&gt;
	&lt;li&gt;Any editor will do, but I personally prefer &lt;a href=&quot;http://macromates.com/&quot;&gt;Textmate&lt;/a&gt; when I work in OS X. Well worth the money.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Reference material&lt;/strong&gt;

I usually find the &lt;a href=&quot;http://www.w3schools.com/&quot;&gt;W3Schools&lt;/a&gt; pages to be an ok starting point when I research unfamiliar web standards. Their tutorials and examples are uneven, but the site works well for quickly looking up stuff like API details and HTML DOM events.

For Norwegian readers: &lt;a title=&quot;Christian Johansen blog&quot; href=&quot;http://www.cjohansen.no/arkiv&quot;&gt;this&lt;/a&gt; is a very nice blog about Javascript and assorted web technologies. Kudos to Christian Johansen for a solid resource!

&lt;img class=&quot;alignnone size-full wp-image-273&quot; title=&quot;javascriptgoodpartscover&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/javascriptgoodpartscover.jpg&quot; alt=&quot;javascriptgoodpartscover&quot; width=&quot;395&quot; height=&quot;408&quot; /&gt;

My main Javascript source, however, is &lt;a href=&quot;http://en.wikipedia.org/wiki/Douglas_Crockford&quot;&gt;Douglas Crockfords&lt;/a&gt; work. Crockford is the author of JsLint, the &lt;a href=&quot;http://json.org/&quot;&gt;JSON&lt;/a&gt; standard, and general champion of Javascript. Crockford has essentially carved out and evangelized a subset of Javascript / EcmaScript, discouraging use of the more ugly parts in the &lt;a title=&quot;ECMAScript spec (Wikipedia)&quot; href=&quot;http://en.wikipedia.org/wiki/ECMAScript&quot;&gt;language spec&lt;/a&gt;. You'll find a lot of useful articles at his site, as well as a bunch of videos at the &lt;a href=&quot;http://developer.yahoo.com/yui/theater/&quot;&gt;Yahoo YUI site&lt;/a&gt;.

I strongly recommend &lt;a href=&quot;http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&quot;&gt;his book&lt;/a&gt;, which summarizes much of the material from the articles and videos mentioned above. At 153 pages it's one of the most dense, concise language reference books I've ever seen.

&lt;em&gt;
&lt;strong&gt;Special thanks&lt;/strong&gt;

My friend and colleague &lt;a href=&quot;http://www.flipsideremix.com/&quot;&gt;Alexander Odden (aka Flipside)&lt;/a&gt; was kind enough to whip up some sound and music - much appreciated!

I'm grateful to &lt;a title=&quot;Johannes Brodwalls blog&quot; href=&quot;http://brodwall.com/johannes/blog/&quot;&gt;Johannes Brodwall&lt;/a&gt;, &lt;a title=&quot;Christian Johansens blog&quot; href=&quot;http://www.cjohansen.no/&quot;&gt;Christian Johansen&lt;/a&gt;, Lars Juel Jensen, Thomas Kristensen, Henrik Storm Ofteland and Bente Storåker for (sometimes heeded) feedback, suggestions and criticism. Thanks guys (and gal)!&lt;/em&gt;

&lt;/div&gt;</column>
            <column name="post_title">Javascript Tetris Pt 8: Post Mortem &amp; References</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-8-post-mortem-references</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=73
http://kjeldahlnilsson.net/blog/?p=74
http://kjeldahlnilsson.net/blog/?p=75
http://kjeldahlnilsson.net/blog/?p=77
http://kjeldahlnilsson.net/blog/?p=76</column>
            <column name="post_modified">2009-02-11 22:26:07</column>
            <column name="post_modified_gmt">2009-02-11 21:26:07</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=78</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">9</column>
        </table>
        <table name="wp_posts">
            <column name="ID">12</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-04-12 00:08:10</column>
            <column name="post_date_gmt">2008-04-11 22:08:10</column>
            <column name="post_content">I looked forward to &lt;a href=&quot;http://%20http//en.wikipedia.org/wiki/Mass_Effect&quot; title=&quot;Mass Effect&quot;&gt;Mass Effect&lt;/a&gt; for &lt;strong&gt;years &lt;/strong&gt;before its launch last november. Then it finally came out for the Xbox 360... and literally the next day our daughter was born. Fatherhood took scary &amp;amp; wonderful precedence, and the game ended up in my &lt;a href=&quot;http://aidanmoher.com/blog/?p=146&quot; title=&quot;Pile O'Shame&quot;&gt;Pile O'Shame.&lt;/a&gt;

Recently,  I had the apartment to myself for two weeks while my better half and our daughter took an extended holiday up north.  Let's just say I didn't work much on my tan while they were away. &quot;Time to play through Mass Effect!&quot;

First off: this game is far from flawless.
&lt;a href=&quot;http://www.bioware.com&quot;&gt;&lt;/a&gt;

The user interface ranges from functional to horrible. Inventory management basically amounts to a single flat list of items, without even the most rudimentary sort options. Prepare to scroll through pages and pages of text when you buy, sell and manage items.

&lt;a href=&quot;http://www.bioware.com&quot;&gt;Bioware  &lt;/a&gt;opted for realtime, action-based combat with prominent cover and squad gameplay mechanics. Though competent enough, these action bits feel nowhere near as polished as the &lt;a href=&quot;http://rainbowsixgame.de.ubi.com/vegas/&quot;&gt;Rainbow Sixes&lt;/a&gt; or &lt;a href=&quot;http://gearsofwar.com/&quot;&gt;Gears of War&lt;/a&gt;.

Finally, side quests aren't nearly as interesting as the main story missions. You quickly discover that most of the optional quests obviously recycle a limited set of mission objectives, art assets and room layouts.

&lt;strong&gt;However.&lt;/strong&gt; All this is quickly forgotten when you're a few missions into the main story.

Mass Effect is an astounding roleplaying game. While the narrative of the game may not be &lt;a href=&quot;http://en.wikipedia.org/wiki/Nebula_award&quot;&gt;Nebula &lt;/a&gt;winning material, it still stands heads and shoulders above most narrative-driven video games.

The plot is fairly straight-forward; artificial, mechanical beings turn on their makers and then try taking over the galaxy. &lt;a href=&quot;http://www.scifi.com/battlestar/&quot;&gt;Sound familiar?&lt;/a&gt; Yeah, not the most original premise.

What makes the game so enjoyable is its &lt;strong&gt;mood&lt;/strong&gt;. If you like &lt;a href=&quot;http://imdb.com/title/tt0076759/&quot;&gt;classic &lt;/a&gt;&lt;a href=&quot;http://imdb.com/title/tt0084726/&quot;&gt;science &lt;/a&gt;&lt;a href=&quot;http://imdb.com/title/tt0083658/&quot;&gt;fiction &lt;/a&gt;movies, you will absolutely love this game. The music sounds like it fell straight out of an old &lt;a href=&quot;http://en.wikipedia.org/wiki/Blade_Runner_(soundtracks)&quot;&gt;Vangelis&lt;/a&gt; soundtrack. The universe of the game is detailed and feels well thought out. Voice acting is top notch throughout the game. The developers even &lt;a href=&quot;http://www.xbox.com/en-US/games/m/masseffect/20070925-derekvisionary.htm&quot;&gt;added graphical grain filters to mimic those classic movies&lt;/a&gt; (well, most of them are probably digitally remastered and visually crystal clean these days, but you get the idea).

The story, while not very innovative in itself, builds to a very cool climax toward the end of the game; along the way I had plenty of &quot;Wow!&quot; moments. The game often nails that &lt;a href=&quot;http://www.imdb.com/title/tt0062622/&quot;&gt;sense of wonder&lt;/a&gt; that good science fiction is so capable of evoking.

In short, if you are even the slightest bit interested in video games and science fiction, you should run out and buy this game. Just make sure you have a chunk of free time to play through it - it'll take a solid 20-40 hours to finish.</column>
            <column name="post_title">Mass Effect Review (Late To The Party)</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">mass-effect-review-late-to-the-party</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://aidanmoher.com/blog/?p=146</column>
            <column name="post_modified">2008-04-12 00:08:10</column>
            <column name="post_modified_gmt">2008-04-11 22:08:10</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=12</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">19</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-05-09 20:12:14</column>
            <column name="post_date_gmt">2008-05-09 18:12:14</column>
            <column name="post_content">I'm a big fan of project automation. So it's slightly embarrassing to admit that I really don't have a proper scripting language in my toolbox.

What usually happens is that, depending on the task, I end up with a mixture of .bat files, command line tools, Ant build scripts and manual search-replace operations in Emacs. If I need to script anything that's complex enough to make those tools inadequate (loops, conditionals, recursion, non-trivial state), I fall back on Java.

Hardly a complete toolbox, I know.

I've known this for a while, but recently&lt;span style=&quot;font-weight: bold&quot; class=&quot;Apple-style-span&quot;&gt; &lt;a href=&quot;http://thomas.kjeldahlnilsson.net/blog/?p=9&quot;&gt;&lt;span style=&quot;font-weight: normal&quot; class=&quot;Apple-style-span&quot;&gt;I decided to actually do something about it.&lt;/span&gt;&lt;/a&gt; &lt;/span&gt;So, time to A) learn Ruby properly and B) brush up on scripting and data crunching in general.

&lt;img src=&quot;http://www.pragprog.com/images/covers/190x228/ruby.jpg?1184184147&quot; height=&quot;228&quot; width=&quot;189&quot; /&gt;

I already had &lt;a href=&quot;http://www.amazon.com/Programming-Ruby-Pragmatic-Programmers-Guide/dp/1934356085/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1208380639&amp;amp;sr=8-1&quot;&gt;Programming Ruby&lt;/a&gt; (aka &lt;span style=&quot;font-weight: bold&quot; class=&quot;Apple-style-span&quot;&gt;&quot;The Pickaxe&quot;&lt;/span&gt;) by &lt;a href=&quot;http://en.wikipedia.org/wiki/Andy_Hunt_%28author%29&quot;&gt;Andy Hunt&lt;/a&gt; lying around, so I worked my way through that first to bone up on basic Ruby syntax. I won't go into detail on this book, it's already given a lot of praise in other places. Suffice to say, many consider it to be the standard reference book on Ruby.

&lt;img src=&quot;http://www.pragprog.com/images/covers/190x228/bmsft.jpg?1188432696&quot; height=&quot;228&quot; width=&quot;190&quot; /&gt;

Then I picked up &lt;a href=&quot;http://www.amazon.com/Everyday-Scripting-Ruby-Teams-Testers/dp/0977616614/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1208380711&amp;amp;sr=8-1&quot;&gt;Everyday Scripting in Ruby&lt;/a&gt;. While the target audience is actually testers and other &quot;supporting, non-coder personell&quot;, it works pretty well as a companion piece to the Pickaxe.

&lt;em&gt;The Pickaxe&lt;/em&gt; uses a standard object oriented application development for its examples. &lt;em&gt;Everyday Scripting&lt;/em&gt; on the other hand employs standard scripting tasks instead; ie. file system manipulation, data crunching, web scraping and the like. The material that teaches Ruby syntax and OOP in general is clearly intended for people without much serious programming experience and does feel overly verbose in some parts - but it worked well as a refresher and &quot;double take&quot; after reading &lt;em&gt;The Pickaxe&lt;/em&gt;. Finally, the book goes into some syntax &quot;rubyisms&quot;&lt;span style=&quot;font-weight: bold&quot; class=&quot;Apple-style-span&quot;&gt; &lt;/span&gt;that &lt;em&gt;The Pickaxe &lt;/em&gt;glosses over.

&lt;img src=&quot;http://www.pragprog.com/images/covers/190x228/gwd.jpg?1184184147&quot; height=&quot;228&quot; width=&quot;189&quot; /&gt;
&lt;span style=&quot;font-weight: bold&quot; class=&quot;Apple-style-span&quot;&gt;&lt;span style=&quot;font-weight: normal&quot; class=&quot;Apple-style-span&quot;&gt;&lt;a href=&quot;http://www.amazon.com/Data-Crunching-Everyday-Problems-Python/dp/0974514071/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1208380990&amp;amp;sr=8-1&quot;&gt;Data Crunching&lt;/a&gt;&lt;/span&gt; &lt;/span&gt;is another book on scripting. This book is more language agnostic (examples are provided in Python and Java). Think of it as a cookbook of common data manipulation tasks. Topics range between plain text, xml, binary data, relation databases and more.

I particularly liked the section on regular expressions - it felt like one of the best introductions I've read on the subject.  The examples are actually relevant (matching mail adresses, urls, phone numbers) as opposed to the standard silly pattern matching examples of &quot;ab, abab, aab&quot; (ad nauseum) that many other regex introductions opt for instead.

It's not a thick book, but the material is compact. I also found I quite liked the authors' dry sense of humor.

&lt;strong&gt;All of these books contain a fair amount of useful advice on programming in general&lt;/strong&gt;. In other words, they feel very much in line with the other books in the &quot;&lt;a href=&quot;http://pragprog.com/&quot;&gt;Pragmatic Bookshelf&lt;/a&gt;&quot;. The authors regularly branch off into insightful advice on general methodology, techniques and tradeoffs related to the code and examples in the books.

In short, I feel like I've put some new tools in my automation toolbox, but I still need to practise them a lot more. I &lt;strong&gt;particularly &lt;/strong&gt;need to work on my &lt;a href=&quot;http://www.amazon.com/Mastering-Regular-Expressions-Jeffrey-Friedl/dp/0596528124/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1208380489&amp;amp;sr=8-1&quot;&gt;regex skills! &lt;/a&gt;</column>
            <column name="post_title">Confessions Of A Scripting Weenie</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">confessions-of-a-scripting-weenie</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://thomas.kjeldahlnilsson.net/blog/?p=9</column>
            <column name="post_modified">2008-05-29 09:26:50</column>
            <column name="post_modified_gmt">2008-05-29 07:26:50</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=19</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">22</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-07-04 18:39:23</column>
            <column name="post_date_gmt">2008-07-04 16:39:23</column>
            <column name="post_content">
&lt;p align=&quot;center&quot;&gt; &lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/gtacover.jpg&quot; alt=&quot;GTA IV box art&quot; /&gt;&lt;/p&gt;
Finally got my hands on &lt;a href=&quot;http://www.1up.com/do/reviewPage?cId=3167589&amp;amp;p=4&quot; title=&quot;1Up GTAIV review&quot;&gt;GTA IV&lt;/a&gt; last week, yay. I'm about five hours into it so far. My initial impression of the game itself is very positive... and I still have trouble really enjoying it.

Why? Because I know that the chance of me completing the storyline of this game, ie &quot;getting the whole experience&quot;, is slim to none. Translation: I don't have as much time as I'd like for this hobby any more. Boo hoo.

Part of the problem is that I can be a terrible neat-freak and completionist in some ways. So I really like &lt;strong&gt;finishing &lt;/strong&gt;a&lt;strong&gt; &lt;/strong&gt;good game. And on the flip side, I also hate &lt;strong&gt;not&lt;/strong&gt; being able to finish said game.

This is of course is due to the whole &quot;having a life&quot; and &quot;being a responsible adult&quot; thing... which is a worthwhile tradeoff. But when I actually do find the time to turn on my Xbox, knowing that I probably won't be able to get through the whole game ends up tainting the experience.

&lt;em&gt;&quot;Ahh, but Thomas, couldn't you space it out a little? Pace yourself! Just finish the stupid game in X months instead of X days or weeks!&quot;&lt;/em&gt; Yeah, that's what I thought too. Unfortunately I find that I lose interest in most games after a certain point in time, especially after extended breaks. It's akin to stopping in the middle of a massive novel; the threshold for getting back into it rises as time passes.

Good for me, then, that the entire games industry seems to be changing to suit my lifestyle.

&lt;a href=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/cod4cover.jpg&quot; title=&quot;Call of Duty IV box art&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/portalcover.jpg&quot; alt=&quot;Portal box art&quot; /&gt;&lt;a href=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/portalcover.jpg&quot; title=&quot;Portal box art&quot;&gt; &lt;/a&gt;&lt;/p&gt;
Case study A: &lt;a href=&quot;http://www.1up.com/do/reviewPage?cId=3163578&amp;amp;p=1&quot; title=&quot;1Up Portal review&quot;&gt;Portal&lt;/a&gt;. Innovative and thoughtful gameplay, at times brilliantly funny, and above all &lt;em&gt;perfectly sized&lt;/em&gt;. 3-4 hours total gameplay (unless you're a little slow). It was exactly what it needed to be&lt;strong&gt; - &lt;/strong&gt;no more, no less.

&lt;a href=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/cod4cover.jpg&quot; title=&quot;Call of Duty IV box art&quot;&gt;&lt;/a&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/cod4cover.jpg&quot; alt=&quot;Call of Duty IV box art&quot; /&gt;&lt;/p&gt;
Case study B: &lt;a href=&quot;http://www.1up.com/do/reviewPage?cId=3164496&amp;amp;p=1&amp;amp;sec=REVIEWS&quot; title=&quot;1Up COD4 review&quot;&gt;Call of Duty 4&lt;/a&gt;. Great first person shooter with a single player component only 5-6 hours long; basically a solid rollercoaster ride with very little artificial filler or padding along the way. Again, the amount of gameplay there was just right.

I find that I really appreciate these smaller, more contained games - even though they often cost as much as the ones with 5-10 times as much content. And interestingly, these shorter games seem to be examples of an ongoing shift in the games industry.

Producing big budget video games is growing increasingly expensive. It takes serious time and money to design, code and provide art/audio assets for these products. In the old days, you could stick&lt;strong&gt; &lt;/strong&gt;a couple of programmers in a basement&lt;strong&gt; &lt;/strong&gt;and possibly have a blockbuster hit a few months later. Today, you need literally hundreds of employees&lt;strong&gt; &lt;/strong&gt;working for years, since the complexity and media production values of these games are so much higher than they used to be. This forces developers to cut the &lt;a href=&quot;http://en.wikipedia.org/wiki/Scope_(project_management)&quot; title=&quot;Wikipedia reference on scope in project management&quot;&gt;scope&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;of their games before releasing them.

Meanwhile, the gamer demographic is changing. The average age of the customer is &lt;a href=&quot;http://www.bizreport.com/2008/04/study_gamer_demographic_complex.html&quot; title=&quot;Gamer demographic study&quot;&gt;33 and rising&lt;/a&gt;. Publishers and developers essentially have to adapt to a maturing audience which has less free time on their hands. People like me (and a lot of my friends).

So I probably won't get through GTA IV. Big deal. My age group (kids over the age of thirty) has plenty of other cool stuff to look forward to. Can't wait for Portal 2. :)</column>
            <column name="post_title">Shorten Your Videogame And I Will Buy It</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">shorten-your-videogame-and-i-will-buy-it</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2008-07-06 21:11:13</column>
            <column name="post_modified_gmt">2008-07-06 19:11:13</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=22</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">26</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-05-28 23:19:24</column>
            <column name="post_date_gmt">2008-05-28 21:19:24</column>
            <column name="post_content">
&lt;p style=&quot;background: #ffffff none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;So I developed my first little &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://www.rubyonrails.org/&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;Rails&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt; application recently.&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p style=&quot;background: #ffffff none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;Given how &lt;a href=&quot;http://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;“&lt;/a&gt;&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Rapid_application_development&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;RAD&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;-y” and agile the development process feels in the Rails framework (at least compared to something like &lt;a href=&quot;http://www.springframework.org/go-webflow2&quot;&gt;Spring MVC&lt;/a&gt; + &lt;a href=&quot;http://www.hibernate.org/&quot;&gt;Hibernate&lt;/a&gt;), &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;I was expecting the actual deployment of the thing to be a breeze. &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p style=&quot;background: #ffffff none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; font-style: normal&quot;&gt; &lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;I was wrong.&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p style=&quot;background: #ffffff none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;Rails deployment is done using a tool or framework called &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://capify.org/&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;Capistrano&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;. Capistrano kinda resembles &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://rake.rubyforge.org/&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;Rake&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;; you define tasks and variables in a deploy script (like a &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://rake.rubyforge.org/files/doc/rakefile_rdoc.html&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;Rakefile&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt;), hooking it directly to your &lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Software_configuration_management&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;SCM&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt; system of choice (&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://subversion.tigris.org/&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;strong&gt;Subversion&lt;/strong&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;span style=&quot;font-style: normal&quot;&gt;&lt;span&gt; in my case). Running the Capistrano deployment tasks then refreshes your Rails server environment with the latest and greatest version of your application, directly from the repository (Capistrano can be used for automating a bunch of other remote tasks too).&lt;/span&gt;&lt;/span&gt;&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p style=&quot;background: #ffffff none repeat scroll 0% 50%; -moz-background-clip: -moz-initial; -moz-background-origin: -moz-initial; -moz-background-inline-policy: -moz-initial; font-style: normal&quot;&gt; &lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;Actually making this process work as expected took me a whole evening, several cups of coffee and occasional copious swearing. I don’t recall every roadblock I encountered, but the following two were the big (ie. most time-consuming) gotchas for me:&lt;/font&gt;&lt;/font&gt;&lt;/p&gt;

&lt;ul&gt;
	&lt;li&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;Capistrano is a little sensitive 	to Subversion repository url structure. Putting the root of your Rails app 	in &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;applicationName\&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;trunk\applicationName\&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt; 	works. Putting your app root directly in &lt;/font&gt;&lt;/font&gt;&lt;em&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;applicationName\&lt;/font&gt;&lt;/font&gt;&lt;/em&gt;&lt;strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;trunk\&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt; 	does not; you get a “bad url” error thrown back at you by 	Capistrano (perhaps from the underlying ruby SVN wrapper). &lt;/font&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;Printing 	anything to stdout can &lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;a href=&quot;http://litespeedtech.com/support/forum/archive/index.php/t-1422.html&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;strong&gt;eff 	things up&lt;/strong&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;/strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt; 	for the underlying webserver. I had some debug &lt;/font&gt;&lt;/font&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;em&gt;puts 	&lt;/em&gt;&lt;/font&gt;&lt;/font&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;statements 	in my application. These were no problem when testing on localhost. 	In the server environment, however, they caused the pages to be 	served as plain text instead of html. Took me some googling to 	figure that one out. &lt;/font&gt;&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;What did I learn?&lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;

&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;The Rails deployment process feels somewhat fragile and fiddly; so set up and test the deployment routine &lt;strong&gt;before&lt;/strong&gt; seriously starting development on your application. The actual changes (of which the two above were just the most annoying ones) I had to make to my application and configuration were small. They would, however, have been a bigger pain to debug and implement late in a bigger project with some momentum.&lt;/font&gt;&lt;/font&gt;

&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;em&gt;Possible final disclaimer:&lt;/em&gt; disregarding &lt;a href=&quot;http://www.urbandictionary.com/define.php?term=pebcak&quot;&gt;PEBCAK&lt;/a&gt; on my part, some of the problems could be due to the Rails configuration on the shared host I’m using for my domain(s). &lt;/font&gt;&lt;/font&gt;&lt;a href=&quot;http://www.site5.com/&quot;&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;strong&gt;Site 5&lt;/strong&gt;&lt;/font&gt;&lt;/font&gt;&lt;/a&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt; has been very good for me so far but I’ve read some rumblings about their Rails support in the&lt;/font&gt;&lt;/font&gt;&lt;strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt; &lt;/font&gt;&lt;/font&gt;&lt;/strong&gt;&lt;font face=&quot;Times New Roman, serif&quot;&gt;&lt;font size=&quot;3&quot;&gt;&lt;a href=&quot;http://forums.site5.com/forumdisplay.php?s=fabbe59495e7f3b06282ac3e3acf541f&amp;amp;f=44&quot;&gt;support forums&lt;/a&gt;.&lt;/font&gt;&lt;/font&gt;
&lt;p style=&quot;margin-bottom: 0cm&quot;&gt;&amp;nbsp;&lt;/p&gt;</column>
            <column name="post_title">Rails Deployment Tinkering</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">rails-deployment-woes</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2008-05-31 16:13:41</column>
            <column name="post_modified_gmt">2008-05-31 14:13:41</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=26</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">1</column>
        </table>
        <table name="wp_posts">
            <column name="ID">32</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-02-22 23:17:38</column>
            <column name="post_date_gmt">2009-02-22 22:17:38</column>
            <column name="post_content">I wish I could go back in time and give myself career advice.

&lt;img class=&quot;aligncenter size-full wp-image-680&quot; title=&quot;BackToTheFutureAdvice&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/02/btfpic.jpg&quot; alt=&quot;BackToTheFutureAdvice&quot; width=&quot;492&quot; height=&quot;319&quot; /&gt;

Actually, I'd probably hold off on the work-related issues. Essentials first: women, lottery numbers, financial advice. &lt;em&gt;Back To The Future&lt;/em&gt; 101, right? But with that out of the way: career tips! What would I say to my younger self?

&lt;strong&gt;1. Active knowledge management&lt;/strong&gt;

Cultivate an &lt;a title=&quot;Norvig's Teach Yourself Programming in Ten Years&quot; href=&quot;http://norvig.com/21-days.html&quot;&gt;active approach&lt;/a&gt; to learning and growing as a craftsman. Set and follow a clear personal path - don't just let corporate whims dictate the areas of your expertise. Take charge! If you absolutely have to work with dead-end or irrelevant technology at your day job, then learn what you need in your free time.

&lt;strong&gt;2. Timeless skills &amp;gt; buzzwords&lt;/strong&gt;

On a related note, focus your spare time on diversified and technology agnostic skills, rather than &lt;em&gt;enterprise technology of the week &lt;/em&gt;mandated by the corporate overlords.

While there may be something to be said for staying painfully up to date on the latest industry trends / Gartner approved buzzwords, I personally find it more rewarding to go back and improve my core skills. There's always basic stuff &lt;a title=&quot;Polishing Rust blog post&quot; href=&quot;http://kjeldahlnilsson.net/blog/?p=9&quot;&gt;I could be much better at&lt;/a&gt;. Math, OOP, &lt;a title=&quot;Code Kata URL&quot; href=&quot;http://codekata.pragprog.com/&quot;&gt;programming technique&lt;/a&gt;: skills which will still endure when the &lt;a title=&quot;Spring Framework link&quot; href=&quot;http://www.springsource.org/&quot;&gt;Spring framework&lt;/a&gt; draws it last breath (or last download, I guess).

&lt;strong&gt;3. Produce in your spare time&lt;/strong&gt;

When learning a useful new skill in your free time (see above), don't limit yourself to 'Hello World' or a dinky O'Reilly tutorial. Build something concrete. Add new stuff to your portfolio.

Pour your energy and love of learning into tangible side projects.  Create open source software, write articles, start an &lt;a title=&quot;Micro ISV Wikipedia Entry&quot; href=&quot;http://en.wikipedia.org/wiki/Micro_ISV&quot;&gt;mISV&lt;/a&gt;, work for non-profits/charities... Do whatever appeals most to you. Just produce something!

&lt;strong&gt;4. You != The Company
&lt;/strong&gt;

I wrote blog posts exclusively inside a corporate intranet for a while. I'm kicking myself for that now. Most of what I wrote was rubbish, but it would still be nice to have it pad out my own blog archives rather than the graveyard of some internal company webserver (which is where my old blog posts currently reside).

If you enjoy holding presentations, focus on external meetups and conferences. Don't hide your work in internal company venues (unless your topic concerns company secrets). You want to invest in extracurricular work that benefits both your company &lt;strong&gt;and&lt;/strong&gt; your public profile; when you switch jobs you only benefit from the latter.

Make sure your employment contract doesn't state that your employer owns everything you create outside of work. Why should you freely give away all your potential off-hours creativity to a faceless corporation (unless you're strictly a 9-5 programmer, in which case I suppose it doesn't matter)?

And please think twice before spending your spare time on certificatons mandated by your employer. Certifications can be really useful learning excercises, but spending time outside office hours to study for them?  Only if  it clearly makes you a better craftsman.

&lt;strong&gt;Wrapping up&lt;/strong&gt;

So, in summary: Take charge of your career. Improve your craftsmanship. Produce stuff. Make sure you own your work and ideas.

I didn't give the above issues much active thought until these last two years, and I'd love to be able to give my former self some of these pointers. Fortunately, however, there's plenty of time to remedy my previous career coma. Which reminds me: I'd better get back to work on my&lt;a title=&quot;PonderTop project&quot; href=&quot;http://www.thoughtmuse.com&quot;&gt; secret side project&lt;/a&gt;. :)

&lt;strong&gt;Loosely related stuff&lt;/strong&gt;

Paul Graham on &lt;a title=&quot;Paul Graham essay URL&quot; href=&quot;http://www.paulgraham.com/love.html&quot;&gt;&quot;How To Do What You Love&quot;&lt;/a&gt;.

Also, check out the video below. &lt;a title=&quot;Zed Shaw's blog&quot; href=&quot;http://www.zedshaw.com/blog/index.html&quot;&gt;Zed Shaw&lt;/a&gt; on intrigue, suspense, corporate autism, stakes and strippers. Very funny talk!

&lt;object width=&quot;400&quot; height=&quot;227&quot; data=&quot;http://vimeo.com/moogaloop.swf?clip_id=2723800&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; type=&quot;application/x-shockwave-flash&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=2723800&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; /&gt;&lt;/object&gt;</column>
            <column name="post_title">Invest In Yourself</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">invest-in-yourself</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://kjeldahlnilsson.net/blog/?p=9</column>
            <column name="post_modified">2009-05-29 12:33:32</column>
            <column name="post_modified_gmt">2009-05-29 11:33:32</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=32</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">29</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-06-06 19:25:05</column>
            <column name="post_date_gmt">2008-06-06 17:25:05</column>
            <column name="post_content">Stop me if you've heard this sentiment before: &lt;em&gt;&quot;Regex? You mean that archaic text matching stuff that Unix freaks use?&quot;&lt;/em&gt;

&lt;a href=&quot;http://en.wikipedia.org/wiki/Regular_expression&quot;&gt;Regular expressions&lt;/a&gt; (often abbreviated as 'regex') are surprisingly unpopular in the developer community (at least at the places that I've worked). Which is a shame. It's a powerful tool, and something any professional programmer should have in his toolbox.

You may not need them very often if you just develop &lt;a href=&quot;http://en.wikipedia.org/wiki/Create%2C_read%2C_update_and_delete&quot;&gt;CRUD&lt;/a&gt; applications in a nice cosy web framework. But some day you may need to crunch some text files, manually export some data, or &lt;a href=&quot;http://en.wikipedia.org/wiki/Web_scraping&quot;&gt;scrape a web page&lt;/a&gt;... and then you'll have a much easier time of it if you're able to quickly bang out a regular expression.

I've known &quot;just enough to be dangerous&quot; about regular expressions for years, but never got over that initial hump; every time I needed to use them I had to find a cheat sheet on the web and basically rediscover the syntax. This didn't exactly make for a tool that I eagerly reached for. This also ties into my unfortunate &lt;a href=&quot;http://thomas.kjeldahlnilsson.net/blog/?p=19&quot;&gt;weak knowledge of scripting languages&lt;/a&gt;.

So I needed to improve myself in this area. I started by forcing myself to do some nontrivial text crunching in Ruby; a web scraper, some text file processing, stuff like that. Unfortunately, language specific regex documentation usually sucks because it

&lt;strong&gt;A)&lt;/strong&gt; is often very short (see the slim treatment of regular expressions in &lt;a href=&quot;http://pragprog.com/titles/ruby/programming-ruby&quot;&gt;The Pickaxe&lt;/a&gt;)

&lt;strong&gt;B)&lt;/strong&gt; uses lame, simplistic examples

and &lt;strong&gt;C)&lt;/strong&gt;, is often incomplete.

Incomplete in the sense that they leave nuances out, and only cover the specific flavor of regex of that specific programming language. If you switch to another language with another subset of regex functionality you have to spend time relearning things and discovering new quirks.

Which is why I went and bought this sucker:
&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/06/regexcover.png&quot; height=&quot;387&quot; width=&quot;293&quot; /&gt;

&lt;a href=&quot;http://oreilly.com/catalog/9780596002893/&quot;&gt;Mastering Regular Expressions&lt;/a&gt; is an excruciatingly complete reference on regex. It starts with a basic overview of syntax and &quot;pattern matching thinking&quot;, then goes on to cover the superset of regex syntax across all the major languages and tools. It delves into how regular expressions work under the hood, discusses performance issues, and provides in depth discussion of how some of the major languages support it (Perl, Java, .Net, PHP). All in all, a very complete and well written reference. I highly recommend it.

No,  of course I didn't read the book cover to cover :). But I worked through the core chapters, and the big takeaways for me were:
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;Appreciation of possibilities.&lt;/strong&gt; I now have a lower threshold for using regular expressions since I know the syntax better and see more cases where it can be used to good effect.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Appreciation of problems. &lt;/strong&gt;There are plenty of common pitfalls to avoid in the general syntax, as well as gotchas in specific flavors of regex.&lt;/li&gt;
&lt;/ul&gt;
And finally: now I can use &lt;a href=&quot;http://www.regexbuddy.com/&quot;&gt;Regex Buddy&lt;/a&gt; with a clear conscience, yay! I have nothing against using GUI wrappers to speed up the work process. But I do strongly feel that one should, to a certain degree, understand and be able to use the underlying tools as well. It's the difference between using a supporting tool as running shoes rather than a pair of crutches; the former makes you go even faster, the latter just saves you from being a cripple.</column>
            <column name="post_title">Digging Into Regular Expressions</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">digging-into-regular-expressions</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://thomas.kjeldahlnilsson.net/blog/?p=19</column>
            <column name="post_modified">2008-06-06 19:25:42</column>
            <column name="post_modified_gmt">2008-06-06 17:25:42</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=29</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">33</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-06-22 17:40:28</column>
            <column name="post_date_gmt">2008-06-22 15:40:28</column>
            <column name="post_content">I should be doing a little &lt;a title=&quot;The Little Schemer&quot; href=&quot;http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992/ref=pd_bbs_sr_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1214139815&amp;amp;sr=8-1&quot;&gt;functional programming&lt;/a&gt; in my spare time, but summer holiday has arrived and I'm entitled to relax. So now for something completely different.

I'm nurturing a growing interest in user interaction design and graphical user interfaces. This is largely due to my current workplace; at &lt;a title=&quot;Favorite Systems website&quot; href=&quot;http://www.favouritesystems.com&quot; target=&quot;_blank&quot;&gt;Favourite Systems&lt;/a&gt; we create a cool new user interface for mobile phones. So, our in-house technology is very visually oriented, and some of my past and present colleagues are quite talented in visual design.

I, however, am not. To put it this way: when I see an awful user interface like, say, your average Linux application GUI, I think: &lt;em&gt;&quot;That looks like something I could've created myself.&quot;&lt;/em&gt; No, that's not a complement.

I also like many of &lt;a title=&quot;iPod Touch&quot; href=&quot;http://www.apple.com/ipodtouch/&quot;&gt;Apple's&lt;/a&gt; &lt;a title=&quot;MacBook&quot; href=&quot;http://www.apple.com/macbook/&quot;&gt;products&lt;/a&gt;, specifically for their focus on strong product design.

Inspired by all this, I've started thinking more actively about visual design and user interaction design over the last year (in addition to design as applied to software engineering, which I have more experience with). So I recently bought &lt;a title=&quot;Universal Principles of Design book link&quot; href=&quot;http://www.rockpub.com/description.asp?isbn=1-59253-007-9&amp;amp;topicid=4&quot;&gt;Universal Principles of Design&lt;/a&gt; - mainly to do some light reading during the summer.

&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/06/univprincipofdesigncover.jpg&quot; alt=&quot;UniversalPrinciplesOfDesignCover&quot; align=&quot;center&quot; /&gt;

I quite enjoyed this book. Reading it was a pleasantly different experience from the sometimes &lt;a title=&quot;Regex blog post&quot; href=&quot;http://thomas.kjeldahlnilsson.net/blog/?p=29&quot;&gt;dry and/or dreary CS textbooks&lt;/a&gt; I usually chew my way through.

The physical book itself is aesthetically very appealing. One principle is detailed per two page spread. The left page provides a textual summary, while the right page contains visual examples - sometimes strikingly interesting ones. The book is a case study in the principles it discusses; examples include &lt;strong&gt;Consistency &lt;/strong&gt;(two pages for every principle), &lt;strong&gt;Golden Ratio &lt;/strong&gt; (check out the cover depicted above), &lt;strong&gt;Legibility&lt;/strong&gt; (every page has a nice clean feel), and &lt;strong&gt;Signal-To-Noise Ratio&lt;/strong&gt; (very little of the material felt like &quot;padding&quot;).

&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/06/univprincipofdesignexcerpt.jpg&quot; alt=&quot;UnivPrincipOfDesignExcerpt&quot; /&gt;

The book introduces the reader to exactly one hundred general design principles. They are  discussed with examples drawn from a wide range of applications in architecture, graphical design and software GUIs.

Some principles seem applicable mainly to specific fields (&lt;a title=&quot;Prospect-Refuge theory explained&quot; href=&quot;http://everything2.com/index.pl?node_id=1678949&quot;&gt;Prospect-Refuge&lt;/a&gt;, to pick one, appears specific to architecture). Others are more obviously general across several fields (&lt;strong&gt;Redundancy&lt;/strong&gt;, &lt;strong&gt;Prototyping&lt;/strong&gt; and &lt;strong&gt;Flexibility-Usability Tradeoff&lt;/strong&gt; are examples of principles used in both &lt;a title=&quot;Industrial Design definition&quot; href=&quot;http://http://en.wikipedia.org/wiki/Industrial_design&quot;&gt;industrial design&lt;/a&gt; and software engineering).

I'm &lt;a title=&quot;Paul Graham essay&quot; href=&quot;http://www.paulgraham.com/hp.html&quot;&gt;hardly the first&lt;/a&gt;&lt;strong&gt; &lt;/strong&gt;to point out the overlap between design and craftsmanship in software engineering and other disciplines such as graphical arts. I do however find this interesting to think about, and this book helps you do exactly that.

Interestingly, though reading this book was prompted by thinking about software and user interface design, I now also find I want to attain at least a sliver of competency in graphical design. I actually really enjoyed drawing as a kid, both on paper and electronically. Unfortunately, I gave that up sometime before &lt;a title=&quot;Wikipedia Deluxe Paint entry&quot; href=&quot;http://en.wikipedia.org/wiki/Deluxe_Paint&quot;&gt;Deluxe Paint&lt;/a&gt; went out of fashion. I really should pick up that thread again sometime.</column>
            <column name="post_title">Thinking About Design</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">thinking-about-design</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://thomas.kjeldahlnilsson.net/blog/?p=29</column>
            <column name="post_modified">2009-04-16 09:29:26</column>
            <column name="post_modified_gmt">2009-04-16 08:29:26</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=33</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">1</column>
        </table>
        <table name="wp_posts">
            <column name="ID">45</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-07-19 09:17:25</column>
            <column name="post_date_gmt">2008-07-19 07:17:25</column>
            <column name="post_content">My girlfriend is really pleased about something: I've become amazingly dilligent at housework during the last few years. The reason is simple:
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/ipodtouch.jpg&quot; alt=&quot;iPod Touch picture&quot; /&gt;&lt;/p&gt;
My mp3 player of choice is the &lt;a href=&quot;http://www.apple.com/ipodtouch/&quot; title=&quot;iPod Touch link&quot;&gt;iPod Touch&lt;/a&gt;, which I'm very happy with so far. I carry this thing around with me almost everywhere, every day - and the iPod &quot;killer app&quot; for me is &lt;a href=&quot;http://en.wikipedia.org/wiki/Podcasts&quot; title=&quot;Wikipedia podcast definition&quot;&gt;podcasts&lt;/a&gt;. I listen to approx 2hrs of audio every day (to and from work, during housework, before going to sleep).

The two main benefits of podcasts for me are &lt;strong&gt;A)&lt;/strong&gt; they let you take in knowledge while you're doing other stuff, and &lt;strong&gt;B)&lt;/strong&gt; the format is a good delivery mechanism for smaller nuggets of information than provided by, say, the written book.

Given my appreciation of the format, I often recommend podcasts to friends and collagues. I am however getting a little tired of compiling and emailing podcast recommendations, so in the future I'll just reference this blog post instead.  &lt;strong&gt;So without further ado, some of my favourite podcasts:&lt;/strong&gt;
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/tedtalks.jpg&quot; alt=&quot;TedTalks podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://www.ted.com/talks&quot; title=&quot;Ted Talks podcast link&quot;&gt;TedTalks&lt;/a&gt; is a collection of speeches from the TED conference, which is held every year in California. The conference features a wide range of excellent speakers on varied topics; science, arts, design, politics, culture, business, global issues, technology, you name it. Each speech (or performance) is anywhere from 5 to 30 minutes long, and most of them are quite interesting. Kudos to &lt;a href=&quot;http://www.brodwall.com/johannes/blog/2008/06/29/ben-zander-presentation-with-shining-eyes/&quot; title=&quot;Johannes Brodwall blog post&quot;&gt;Johannes&lt;/a&gt; for helping me discover this one!
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/bigideas.jpg&quot; alt=&quot;Big Ideas podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://www.tvo.org/TVOsites/WebObjects/TvoMicrosite.woa?bigideas&quot; title=&quot;Big Ideas podcast link&quot;&gt;Big Ideas&lt;/a&gt; has a similar theme; interesting speeches on varied subjects. The format is somewhat different, however; the featured material consists of more typical lectures, ie. standard length of between 45 and 90 minutes.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/inourtime.jpg&quot; alt=&quot;In Our Time podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://www.bbc.co.uk/radio4/history/inourtime/&quot; title=&quot;In Our Time podcast link&quot;&gt;In Our Time&lt;/a&gt; is a weekly BBC radio program which focuses on &quot;the history of ideas&quot;, as their BBC web page puts it. Every episode highlights some distinct event, idea, period or person in history, which the studio participants then proceed to discuss for around 45 minutes. Melvyn Bragg, the host, creates an atmosphere in which the guests (usually british academics) really enjoy themselves while talking about their fields of expertise.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/entrthoughtleaders.jpg&quot; alt=&quot;Entrepeneurial Thought Leaders podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://edcorner.stanford.edu/podcasts.html&quot; title=&quot;Entrepenurial Thought Leaders podcast&quot;&gt;Entrepeneurial Thought Leaders&lt;/a&gt; is a series of lectures from &lt;a href=&quot;http://www.stanford.edu/&quot; title=&quot;Stanford link&quot;&gt;Stanford&lt;/a&gt;, dedicated to business, innovation and entrepeneurship. The speakers are usually founders, leaders and venture capitalists from well known american companies/firms. The lectures provide thoughts on starting, growing and running high tech companies. Personally I've found this podcast very useful as a way to get my head into the &quot;entrepeneurial headspace&quot; after I started working at a relatively small and young &lt;a href=&quot;http://www.favouritesystems.com&quot; title=&quot;Favourite Systems website&quot;&gt;company&lt;/a&gt; last year.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/drunkandretired.jpg&quot; alt=&quot;Drunkandretired podcast&quot; /&gt;&lt;/p&gt;
Moving along to podcasts on software development, we have &lt;a href=&quot;http://www.drunkandretired.com/podcast/&quot; title=&quot;Drunkandretired podcast link&quot;&gt;DrunkAndRetired&lt;/a&gt;. Charles and Cote have discussed, joked, enthused and commiserated about software development for several years now. I like (and usually agree with) their opinions on our industry, and the tone is usually loose and entertaining; the main topic might be programming but expect lots of funny digressions. :)
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/stackoverflow.jpg&quot; alt=&quot;Stackoverflow podcast&quot; /&gt;&lt;/p&gt;
Here's another one based on the &quot;two friends chatting&quot; format. Joel Spolsky (of &lt;a href=&quot;http://www.joelonsoftware.com&quot; title=&quot;Joel On Software link&quot;&gt;Joel on Software&lt;/a&gt; fame) and Jeff Atwood (of &lt;a href=&quot;http://www.codinghorror.com/blog/&quot; title=&quot;Coding Horror link&quot;&gt;Coding Horror&lt;/a&gt; fame) are currently building a developer community site called &lt;a href=&quot;http://stackoverflow.com/&quot; title=&quot;Stack Overflow link&quot;&gt;Stack Overflow&lt;/a&gt;. &lt;a href=&quot;http://blog.stackoverflow.com/&quot; title=&quot;Stack Overflow podcast link&quot;&gt;Stack Overflow&lt;/a&gt; is also the name of their podcast - they are located on opposite coasts of the United States, so they collaborate over the phone. Every week they record a conversation and publish it as a podcast, with plenty of insight on both business and technology.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/hanselminutes.jpg&quot; alt=&quot;Hanselminutes podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://www.hanselminutes.com/&quot; title=&quot;Hanselminutes podcast link&quot;&gt;Hanselminutes&lt;/a&gt; is produced by Scott Hanselmann, a well known online personality in software development. He's employed by Microsoft, so the specific technologies discussed are usually .Net and Windows based. His discussions with the guest do, however, usually unearth useful tech-agnostic ideas as well.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/softwareengineeringradio.jpg&quot; alt=&quot;Software Engineering Radio podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://www.se-radio.net/&quot; title=&quot;Software Engineering Radio podcast link&quot;&gt;Software Engineering Radio&lt;/a&gt; is somewhat similar to Hanselminutes - ie. a series of interviews, sometimes with well known members of the software development community. The subjects discussed are things like programming languages, development methods, architectural approaches. Be aware that the producers and hosts are german, which means that while everything is spoken in english, at least one side of the interview often sounds somewhat accented. This isn't a problem for me, but &lt;a href=&quot;http://en.wiktionary.org/wiki/your_mileage_may_vary&quot; title=&quot;YMMV wikipedia definition&quot;&gt;YMMV&lt;/a&gt;.
&lt;p align=&quot;center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/1upyours.jpg&quot; alt=&quot;1Up Yours podcast&quot; /&gt;&lt;/p&gt;
Moving along to video games, &lt;a href=&quot;http://www.1up.com/do/minisite?cId=3144909&quot; title=&quot;1up Yours podcast link&quot;&gt;1Up Yours&lt;/a&gt; is one of the better podcasts out there. It's produced weekly by the staff of &lt;a href=&quot;http://www.1up.com/&quot; title=&quot;1up.com link&quot;&gt;1up.com&lt;/a&gt;, one of the bigger commercial gaming websites. The discussions cover things like impressions of new games, industry news, and interviews with game developers. I follow this podcast mainly to keep myself updated on cool new games, but I also find I really enjoy their gossip about what is happening in the games industry.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/gamerswithjobs.jpg&quot; alt=&quot;Gamers With Jobs podcast&quot; /&gt;&lt;/p&gt;
The &lt;a href=&quot;http://www.gamerswithjobs.com/&quot; title=&quot;Gamers With Jobs podcast link&quot;&gt;Gamers With Jobs&lt;/a&gt; conference call is another weekly roundtable discussion on games. The hosts are active writers in the video game press, and (much like 1up Yours) they discuss game releases and industry news.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/thetotallyradshow.jpg&quot; alt=&quot;The Totally Rad Show podcast&quot; /&gt;&lt;/p&gt;
One of the reasons I really dig &lt;a href=&quot;http://www.totallyradshow.com/&quot; title=&quot;Totally Rad Show link&quot;&gt;The Totally Rad Show&lt;/a&gt; is that I can identify with the hosts. They're around my age, and they've grown up enjoying the same nerdy bits of pop culture as me and many of my friends. Every week they sit down in front of a green-screen and talk about &quot;everything rad&quot; - cool new movies, video games, tv shows, comics... you name it. The tone is informal but the episodes are released as quite professionally produced video episodes.
&lt;p style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;http://thomas.kjeldahlnilsson.net/blog/wp-content/uploads/2008/07/escapepod.jpg&quot; alt=&quot;Escape Pod podcast&quot; /&gt;&lt;/p&gt;
&lt;a href=&quot;http://escapepod.org/&quot; title=&quot;Escape Pod link&quot;&gt;Escape Pod&lt;/a&gt; is a weekly podcast featuring science fiction short stories. Most of the featured authors are widely published authors, and the narrators are usually very engaging. Highly recommended if you enjoy the science fiction genre.

&lt;strong&gt;All of the podcasts above are searchable and available for free in the iTunes music store. Go on, run along and fill up your iPod. :)&lt;/strong&gt;</column>
            <column name="post_title">Podcasts You Should Check Out</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">podcasts-you-should-check-out</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2008-07-24 23:24:01</column>
            <column name="post_modified_gmt">2008-07-24 21:24:01</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=45</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">71</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:16:57</column>
            <column name="post_date_gmt">2009-01-28 19:16:57</column>
            <column name="post_content">&lt;em&gt;Part 1, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

&lt;em&gt;&lt;strong&gt;UPDATED&lt;/strong&gt;: Fixed a bug in collision detection causing tiles on far left to fall through.&lt;/em&gt;

I've wanted to learn Javascript for a while now - and I'd like to learn it properly this time.

Of course I've used a smattering of Javascript code here and there. Small stuff, like input validation in web pages. Unfortunately, I've mostly relied on good old &quot;google-copy-paste-tweak&quot; coding. I even used &lt;a href=&quot;http://cocoon.apache.org/&quot;&gt;serverside&lt;/a&gt; Javascript in a project at one point, but I never really made the effort to &lt;strong&gt;properly&lt;/strong&gt; learn the language.

And I don't think I'm the only guy guilty of an aversion towards it. If you come from &lt;a title=&quot;Java&quot; href=&quot;http://en.wikipedia.org/wiki/Java_(software_platform)&quot;&gt;strongly typed&lt;/a&gt;, &lt;a title=&quot;C#&quot; href=&quot;http://en.wikipedia.org/wiki/C_Sharp_(programming_language)&quot;&gt;compiled languages&lt;/a&gt; and suddenly have to accomplish something using browser scripting, you might have the same reaction I did: &lt;em&gt;&quot;Eeeew!&quot;&lt;/em&gt;.

&lt;em&gt;&quot;No fancy IDE or compiler to hold my hand? Annoying crossbrowser issues? The syntax sort of looks like java... but without classes or type safety? Screw this!&quot;&lt;/em&gt;

In the years after that, Javascript usage took off as a part of the AJAX/Web 2.0 phenomenon... and I mostly ignored it for a while, having been burned by my earlier experience. Fortunately I saw the light eventually. :)

I learned to like interpreted, dynamic languages through &lt;a title=&quot;Scripting blog post&quot; href=&quot;http://kjeldahlnilsson.net/blog/?p=19&quot;&gt;Ruby&lt;/a&gt;, so Javascript syntax started to make much more sense to me. Fiddling with &lt;a title=&quot;The Little Schemer&quot; href=&quot;http://www.amazon.com/Little-Schemer-Daniel-P-Friedman/dp/0262560992&quot;&gt;functional programming&lt;/a&gt; also helped. Javascript has powerful stuff like higher order functions, closures, eval and metaprogramming. The language actually &lt;a title=&quot;Javascript background&quot; href=&quot;http://weblogs.mozillazine.org/roadmap/archives/2008/04/popularity.html&quot;&gt;started as a Scheme dialect&lt;/a&gt;, before the author was told to &quot;make it look like Java&quot;.

Javascript also turned into a more reliable tool through a &lt;a title=&quot;Prototype&quot; href=&quot;http://www.prototypejs.org/&quot;&gt;bunch&lt;/a&gt; of &lt;a title=&quot;Dojo&quot; href=&quot;http://dojotoolkit.org/&quot;&gt;new&lt;/a&gt; &lt;a title=&quot;JQuery&quot; href=&quot;http://jquery.com/&quot;&gt;libraries&lt;/a&gt;. These extended the language and hid some of the icky crossbrowser problems.

Finally, and most importantly, Javascript has become very pervasive. Disregarding the standard Web 2.0 &lt;a title=&quot;Google Maps&quot; href=&quot;http://maps.google.no/&quot;&gt;applications&lt;/a&gt;, the language can be applied in a number of different contexts - &lt;a title=&quot;Rhino&quot; href=&quot;http://www.mozilla.org/rhino/&quot;&gt;embedded&lt;/a&gt; wherever you have a JVM, in Flash/Flex, the &lt;a title=&quot;Google App Engine&quot; href=&quot;http://code.google.com/intl/nb/appengine/kb/general.html#language&quot;&gt;Google App Engine&lt;/a&gt;... I love tools I can take with me everywhere.

Steve Yegge's &lt;a title=&quot;Javascript&quot; href=&quot;http://www.youtube.com/watch?v=BttI-y9VzXQ&amp;amp;eurl=http://ajaxian.com/archives/steve-yegge-on-server-side-javascript&quot;&gt;talk on Rhino&lt;/a&gt; was the final straw; I needed to learn the core language. Also, optional bonus points for updating myself on DOM scripting and CSS.

What's the best way of learning a tool? &lt;strong&gt;Use it to create something!&lt;/strong&gt; We want to build something not overly trivial, with a variety of requirements on input, output, data structures, state and program flow... so let's build a game. We'll have to deal with graphics, sound, user input and game state. Perfect.</column>
            <column name="post_title">Javascript Tetris Pt 1: Rationale</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-1-rationale</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=19
http://kjeldahlnilsson.net/blog/?p=77
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=73</column>
            <column name="post_modified">2010-05-15 18:45:31</column>
            <column name="post_modified_gmt">2010-05-15 17:45:31</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=71</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">7</column>
        </table>
        <table name="wp_posts">
            <column name="ID">72</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:17:46</column>
            <column name="post_date_gmt">2009-01-28 19:17:46</column>
            <column name="post_content">&lt;em&gt;Part&lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt; &lt;/a&gt;&lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, 2, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

What sort of game should we build?

It has to be something simple, since this is just a learning exercise for me (as a relative Javascript newbie). The scope of the project should be small, preferrably under a week or two using free time in the evenings. This will limit the complexity of the game; we can't support too much input, ouput or complex game state.

We also don't have time to seriously ponder &lt;a title=&quot;The Chemistry Of Game Design (Gamasutra)&quot; href=&quot;http://www.gamasutra.com/view/feature/1524/the_chemistry_of_game_design.php&quot;&gt;high level game design&lt;/a&gt;, so the most practical approach is to just clone an existing game template. &lt;a title=&quot;Tetris&quot; href=&quot;http://en.wikipedia.org/wiki/Tetris&quot;&gt;Tetris&lt;/a&gt; is a nice candidate. Everyone knows how to play it. It has few and simple rules and a nicely static and rectangular playing field. Also, we can get away with very basic and functional presentation. You don't need fancy art direction and killer sound to play tetris.

5 minutes of whiteboarding yields a minimalist &lt;a title=&quot;Gamasutra game design document article&quot; href=&quot;http://www.gamasutra.com/features/19991019/ryan_01.htm&quot;&gt;game design document&lt;/a&gt;:

&lt;img class=&quot;alignnone size-full wp-image-140&quot; title=&quot;quicktetrisdesigndoc&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/quicktetrisdesigndoc.jpg&quot; alt=&quot;quicktetrisdesigndoc&quot; width=&quot;500&quot; height=&quot;375&quot; /&gt;

We'll dub the game &lt;strong&gt;Quicktetris&lt;/strong&gt;. This reminds us to keep the project small, simple and easily finished. :) Another fifteen minutes spent &lt;a title=&quot;Mindmapping&quot; href=&quot;http://en.wikipedia.org/wiki/Mindmap&quot;&gt;mindmapping&lt;/a&gt; and we have a rough &lt;a title=&quot;Scrum product backlog&quot; href=&quot;http://en.wikipedia.org/wiki/Scrum_(development)#Product_backlog&quot;&gt;backlog&lt;/a&gt; of features that we need to implement:

&lt;img class=&quot;alignnone size-full wp-image-141&quot; title=&quot;quicktetrisprojectplanning&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/quicktetrisprojectplanning.jpg&quot; alt=&quot;quicktetrisprojectplanning&quot; width=&quot;1020&quot; height=&quot;933&quot; /&gt;

(This was the rough, preliminary plan. While I started out with the plan outlined in the mindmap above, the actual implementation work ended up a little different.)

That should be enough planning for our little project; time go get started!</column>
            <column name="post_title">Javascript Tetris Pt 2: Planning</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-2-planning</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=73
http://kjeldahlnilsson.net/blog/?p=74
http://kjeldahlnilsson.net/blog/?p=75</column>
            <column name="post_modified">2009-02-02 09:34:07</column>
            <column name="post_modified_gmt">2009-02-02 08:34:07</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=72</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">73</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:18:38</column>
            <column name="post_date_gmt">2009-01-28 19:18:38</column>
            <column name="post_content">&lt;em&gt;Full source code can be downloaded from project home at &lt;a href=&quot;http://kjeldahlnilsson.net/portfolio.php&quot;&gt;kjeldahlnilsson.net&lt;/a&gt;.&lt;/em&gt;

&lt;em&gt;Part&lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt; &lt;/a&gt;&lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, 3, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

We'll start by creating some basic infrastructure - just enough to give us a good running start. We need the bare minimum only: personally, I like to evolve my projects to actual needs as I go along. I don't want to invest huge amounts of time in build scripts, test setups, frameworks and support code before I know what I actually need.

&lt;strong&gt;Note&lt;/strong&gt;: The industrious reader may wish to follow along and reimplement the game laid out in this article. Be advised that the source code included in this article is incomplete, and that code snippets sometimes refers to code which is defined further ahead - refer to&lt;a href=&quot;http://kjeldahlnilsson.net/projects/quicktetris/quicktetris-1.0-src.zip&quot;&gt; the full source code&lt;/a&gt; if you want the whole picture. I will reference the files containing the code as we move forward.

&lt;strong&gt;Unit tests&lt;/strong&gt;

We are going to write at least some unit tests as we go along, so we need support for writing and running them in our environment. Now, of course, there are &lt;a title=&quot;JSUnit&quot; href=&quot;http://jsunit.net/&quot;&gt;several&lt;/a&gt; &lt;a title=&quot;YuiTest&quot; href=&quot;http://developer.yahoo.com/yui/yuitest/&quot;&gt;popular&lt;/a&gt; &lt;a title=&quot;JSSpec&quot; href=&quot;http://jania.pe.kr/aw/moin.cgi/JSSpec&quot;&gt;unit&lt;/a&gt; &lt;a title=&quot;QUnit&quot; href=&quot;http://docs.jquery.com/QUnit&quot;&gt;test&lt;/a&gt; frameworks to choose from... but since the goal of our tiny project is to learn Javascript, we'll simply roll our own tiny framework.

We don't need much - some way to assert that tests fail or succeed, some way of defining test cases, and a function to launch and run all the tests.

&lt;em&gt;util.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;// Assert methods needed by test framework
function assertTrue(boolean, errorMsg) {
    if (boolean === false) {
        throw (errorMsg);
    }
    return;
}

function assertFalse(boolean, errorMsg) {
    if (boolean === true) {
        throw (errorMsg);
    }
    return;
}&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

&lt;em&gt;test.js:&lt;/em&gt;

&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var Test = {

    runSuite: function() {
        // Call all methods/testcases in suite
        for (var testFunc in this.Suite) {
            if (this.Suite.hasOwnProperty(testFunc)) { // Don't call any inherited methods
                try {
                    this.Suite[testFunc]();
                }
                catch(err) {
                    alert(testFunc + &quot;() failed: &quot; + err);
                    return;
                }
            }
        }

        Graphics.drawString(&quot;--All tests in suite passed--&quot;, 400, 400);
    },

    Suite: {

        // Add test cases here
        testAsserts: function() {
            assertTrue(2 === 2, &quot;This should never fail&quot;);
            assertFalse(2 === 3, &quot;This should always fail&quot;);
        },

};&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Finally we need some sort of testrunner application. I like having a &quot;test bench&quot; when I develop low level graphical functionality; a context for manually running and observing isolated visual regression tests. We'll create a testbench web page, with a separate button for running our test suite. 

&lt;em&gt;test.html:&lt;/em&gt;
&lt;code&gt;&lt;pre lang=&quot;html4strict&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;title&gt;QuickTetris test bench&lt;/title&gt;
&lt;!-- Load external script --&gt;
&lt;script src=&quot;lib/jQuery/jquery-1.2.6.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;lib/jQuery/jquery-ui-1.6rc4.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;lib/soundmanager/script/soundmanager2.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;src/graphics.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;src/sound.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;src/piece.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;src/field.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;src/test.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;src/util.js&quot;&gt;&lt;/script&gt; 
&lt;script src=&quot;src/main.js&quot;&gt;&lt;/script&gt; 

&lt;script&gt;
  window.onload = function() {
    document.getElementById(&quot;test0&quot;).onclick = function(){ Test.runSuite(); };
    document.getElementById(&quot;test1&quot;).onclick = function(){ Test.testDrawSingleSquare(); };
    document.getElementById(&quot;test2&quot;).onclick = function(){ Test.testDetectKeys(); };
    document.getElementById(&quot;test3&quot;).onclick = function(){ Test.testMoveSquare(); };    
    document.getElementById(&quot;test4&quot;).onclick = function(){ Test.testDrawPlayingField(); };
    document.getElementById(&quot;test5&quot;).onclick = function(){ Test.testPieceCollision(); };
    document.getElementById(&quot;test6&quot;).onclick = function(){ Test.testPlaySound(); };
    document.getElementById(&quot;test7&quot;).onclick = function(){ Test.testPlaySoundLooped(); };
    document.getElementById(&quot;test8&quot;).onclick = function(){ Test.testPlayMusic(); };
    document.getElementById(&quot;test9&quot;).onclick = function(){ Test.testExplodeAnimation(); };
  };
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;

&lt;h3&gt;Programmatic tests&lt;/h3&gt;

&lt;input id=&quot;test0&quot; type=&quot;submit&quot; value=&quot;Run test suite&quot;&gt;&lt;br/&gt;

&lt;h3&gt;Visual tests&lt;/h3&gt;

&lt;input id=&quot;test1&quot; type=&quot;submit&quot; value=&quot;Draw single square&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test2&quot; type=&quot;submit&quot; value=&quot;Detect keyboard input&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test3&quot; type=&quot;submit&quot; value=&quot;Move square based on input&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test4&quot; type=&quot;submit&quot; value=&quot;Draw playing field&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test5&quot; type=&quot;submit&quot; value=&quot;Piece collision&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test6&quot; type=&quot;submit&quot; value=&quot;Play sound&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test7&quot; type=&quot;submit&quot; value=&quot;Play looped sound&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test8&quot; type=&quot;submit&quot; value=&quot;Play music&quot;&gt;&lt;br/&gt;
&lt;input id=&quot;test9&quot; type=&quot;submit&quot; value=&quot;Run explosion animation&quot;&gt;&lt;br/&gt;

&lt;div id=&quot;gameContainer&quot;&gt;

&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
&lt;/pre&gt;&lt;/code&gt;&lt;/br&gt;

You can run it yourself &lt;a title=&quot;Quicktetris test page&quot; href=&quot;http://kjeldahlnilsson.net/projects/quicktetris/test.html&quot;&gt;here&lt;/a&gt;. Clicking the top button calls &lt;strong&gt;Test.runTestSuite()&lt;/strong&gt;:

&lt;img class=&quot;alignnone size-full wp-image-102&quot; title=&quot;quicktetristestbench&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/quicktetristestbench.jpg&quot; alt=&quot;quicktetristestbench&quot; width=&quot;450&quot; height=&quot;338&quot; /&gt;

I debugged the project using Apache on my own machine. Apache comes preinstalled in recent versions of Mac OS X, you simply need to &lt;a title=&quot;How to turn on Apache in Mac OS X&quot; href=&quot;http://support.apple.com/kb/HT3323&quot; target=&quot;_blank&quot;&gt;enable it&lt;/a&gt;. Windows users need to &lt;a title=&quot;Apache download link&quot; href=&quot;http://httpd.apache.org/download.cgi&quot; target=&quot;_blank&quot;&gt;download &lt;/a&gt;and run the binary installer. After starting Apache, simply dump the project in Apache's &lt;code&gt;/htdocs&lt;/code&gt; folder and point your browser to &lt;code&gt;http://localhost/RELATIVE_PROJECT_PATH&lt;/code&gt;.

&lt;strong&gt;Abstract data types, syntactic sugar &lt;/strong&gt;

Tetris is basically all about matrices - a grid of tiles where elements appear, move around, and disappear. We are going to store and manipulate a bunch of game state using two dimensional arrays. Javascript provides bare bones support by letting us define arrays of arrays, but we need a little more syntactic sugar for all the grid hopping we're going to do.

I personally really like Ruby's &lt;a title=&quot;Enumerable&quot; href=&quot;http://www.ruby-doc.org/core/classes/Enumerable.html&quot;&gt;Enumerable&lt;/a&gt; idiom, so we want to wire &lt;strong&gt;each()&lt;/strong&gt;, &lt;strong&gt;map()&lt;/strong&gt; etc into the Javascript &lt;strong&gt;Array&lt;/strong&gt; object. We are, of course, not the first people to think of this; the &lt;a title=&quot;Prototype&quot; href=&quot;http://www.prototypejs.org/&quot;&gt;Prototype&lt;/a&gt; framework could supply much of this functionality instantly. But again: the object here is to learn the language, so we'll write it ourselves.

The following tests articulate what we want from the &lt;strong&gt;Array&lt;/strong&gt; object:

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;        testArrDimensions: function() {
            var width = 3;
            var height = 2;
            var initValue = &quot;x&quot;;
            var arr = get2dArray(width, height, initValue);

            assertTrue(arr.getWidth() === width, &quot;Width of array not expected length&quot;);
            assertTrue(arr.getHeight() === height, &quot;Height of array not expected length&quot;);

            for (var x in arr) {
                if (arr.hasOwnProperty(x)) { // Don't call any inherited methods
                    assertTrue(arr[x].length === height, &quot;Height of array not expected length&quot;);
                }
            }
        },

        testArrEach: function() {
            var arr = [2, 4, 5, 2];
            var length = arr.length;

            var elementsVisited = 0;
            arr.each(function(element) {
                assertTrue(element !== null, &quot;Expected all elements to be non-null&quot;);
                elementsVisited++;
            });

            assertTrue(elementsVisited === length, &quot;Didn't visit &quot; + length + &quot; elements as expected&quot;);
        },

        testArrEach2d: function() {
            var width = 3;
            var height = 2;
            var initValue = &quot;x&quot;;
            var arr = get2dArray(width, height, initValue);

            var elementsVisited = 0;
            arr.each(function(element) {
                assertTrue(element === initValue, &quot;Not all slots in array was set to &quot; + initValue);
                elementsVisited++;
            });

            assertTrue(elementsVisited === (width * height), &quot;Didn't visit &quot; + (width * height) + &quot; elements as expected&quot;);
        },

        testArrEachRow: function() {
            var width = 3;
            var height = 4;
            var initValue = &quot;x&quot;;
            var arr = get2dArray(width, height, initValue);

            var rowsVisited = 0;
            arr.eachRowWithIndex(function(row) {
                assertTrue(row.length === width, &quot;Expected row to be &quot; + width + &quot; elements long&quot;);
                rowsVisited++;
            });

            assertTrue(rowsVisited === height, &quot;Didn't get &quot; + height + &quot; rows as expected&quot;);
        },

        testArrMap: function() {
            var width = 2;
            var height = 2;
            var initValue = &quot;2&quot;;
            var arr = get2dArray(width, height, initValue);

            var mappedArr = arr.map(function(element) {
                return element * 2
            });

            var elementsVisited = 0
            mappedArr.each(function(element) {
                assertTrue(element === initValue * 2, &quot;Not all slots in mapped array were transformed to new value&quot;);
                elementsVisited++;
            });

            assertTrue(elementsVisited === width * height, &quot;Mapped array not same size as original array&quot;);
        }

    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;



We need to augment the Javascript &lt;strong&gt;Array&lt;/strong&gt; object to support this functionality.

&lt;em&gt;util.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;// Returns two dimensional array, every element initiated to given value
function get2dArray(width, height, initValue) {
    var arr2d = [];

    for (var x = 0; x &lt; width; x++) { // For each row
        arr2d[x] = [];
    }

    for (x = 0; x &lt; width; x++) {
        for (var y = 0; y &lt; height; y++) {
            arr2d[x][y] = initValue;
        }
    }

    return arr2d;
}

// D. Crockford idiom for function mixin
Function.prototype.method = function(name, func) {
    this.prototype[name] = func;
    return this;
};

// Array mixins for 2d grid functionality
Array.method('getWidth',
function() {
    return this.length;
});

Array.method('getHeight',
function() {
    return this[0].length;
});

Array.method('isTwoDimensional',
function() {
    return (this[0].constructor == Array);
});

Array.method('each',
function(appliedFunction) {
    for (var x = 0; x &lt; this.getWidth(); x++) {
        if (this.isTwoDimensional()) {
            for (var y = 0; y &lt; this.getHeight(); y++) {
                appliedFunction(this[x][y]);
            }
        }
        else {
            appliedFunction(this[x]);
        }
    }
});

Array.method('eachWithIndexes',
function(appliedFunction) {
    for (var x = 0; x &lt; this.getWidth(); x++) {
        if (this.isTwoDimensional()) {

            for (var y = 0; y &lt; this.getHeight(); y++) {
                appliedFunction(this[x][y], x, y);
            }
        }
        else {
            appliedFunction(this[x], x);
        }
    }
});

Array.method('eachRowWithIndex',
function(appliedFunction) {
    for (rowCount = 0; rowCount &lt; this.getHeight(); rowCount++) {
        var row = [];
        for (columnCount = 0; columnCount &lt; this.getWidth(); columnCount++) {
            row[columnCount] = this[columnCount][rowCount];
        }
        appliedFunction(row, rowCount);
    }
});

Array.method('map',
function(appliedFunction) {
    var mappedArr = null;
    if (this.isTwoDimensional()) {
        mappedArr = get2dArray(this.getWidth(), this.getHeight(), null);
    }
    else {
        mappedArr = [];
    }

    for (var x = 0; x &lt; this.getWidth(); x++) {
        if (this.isTwoDimensional()) {
            for (var y = 0; y &lt; this.getHeight(); y++) {
                mappedArr[x][y] = appliedFunction(this[x][y], x, y);
            }
        }
        else {
            mappedArr[x] = appliedFunction(this[x]);
        }
    }

    return mappedArr;
});&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

A little later I found that &lt;strong&gt;Array.map()&lt;/strong&gt; actually already exists in Javascript. It was, however, still a useful exercise to implement a variant of it myself. It's probably usually not a great idea to &lt;a title=&quot;Monkeypath definition&quot; href=&quot;http://en.wikipedia.org/wiki/Monkey_patch&quot;&gt;monkeypatch&lt;/a&gt; over existing core functionality, though. :)

&lt;strong&gt;Build environment&lt;/strong&gt;

We want to set up some sort of automated code verification - especially important since this is a newbie project. Enter &lt;a title=&quot;JsLint&quot; href=&quot;http://www.jslint.com/&quot;&gt;JsLint&lt;/a&gt;, the closest thing you get to compile-time error checking for Javascript. I chose to run it using the Rhino version (download &lt;a title=&quot;js.jar download&quot; href=&quot;http://www.jslint.com/rhino/index.html&quot;&gt;here&lt;/a&gt;). This is our &lt;a title=&quot;RAKE -Ruby Make&quot; href=&quot;http://rake.rubyforge.org/&quot;&gt;Rake&lt;/a&gt; task for running it:

&lt;em&gt;Rakefile:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;ruby&quot;&gt;desc &quot;Run JSLint audit on code and markup&quot;
task :jslint do

  lintCommand = &quot;java -classpath ./lib/jsLint/js.jar &quot;+
                  &quot;org.mozilla.javascript.tools.shell.Main ./lib/jsLint/jslint.js&quot;;

  # Check the .html files in root dir
  lintTargets = Dir.entries(&quot;.&quot;).reject! do |direntry|
	  if(direntry !~ /(\.html)\z/ ) then
		 true
	  end
  end  

  lintTargets.each do |filename|
    echo &quot;Running JSLint on: &quot;+filename
    puts %x{ #{lintCommand} #{filename} };
  end

  # Check the .js files in /src dir
  lintTargets = Dir.entries(&quot;./src&quot;).reject! do |direntry|
	  if(direntry !~ /(\.js)\z/ ) then
		 true
	  end
  end

  lintTargets.each do |filename|
    echo &quot;Running JSLint on: &quot;+filename
    puts %x{ #{lintCommand} ./src/#{filename} };
  end

  echo &quot;Done running JSLint&quot;

end

def echo(msg)
  puts(&quot;  &lt;Rake build&gt;: &quot;+msg);
end
&lt;/pre&gt;&lt;code&gt;&lt;br/&gt;

Running it, we see that we have some issues in the code we wrote above:

&lt;img class=&quot;alignnone size-full wp-image-114&quot; title=&quot;jslinterror&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/jslinterror.jpg&quot; alt=&quot;jslinterror&quot; width=&quot;505&quot; height=&quot;459&quot; /&gt;

Easily fixed. Now we have a basic infrastructure in place. In the next part we start looking at graphics and user input.</column>
            <column name="post_title">Javascript Tetris Pt 3: Infrastructure</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-3-infrastructure</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=76
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=74
http://kjeldahlnilsson.net/blog/?p=75
http://kjeldahlnilsson.net/blog/?p=77
http://kjeldahlnilsson.net/blog/?p=78</column>
            <column name="post_modified">2010-05-15 18:48:53</column>
            <column name="post_modified_gmt">2010-05-15 17:48:53</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=73</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">8</column>
        </table>
        <table name="wp_posts">
            <column name="ID">60</column>
            <column name="post_author">1</column>
            <column name="post_date">2008-07-19 08:07:23</column>
            <column name="post_date_gmt">2008-07-19 06:07:23</column>
            <column name="post_content">
&lt;p style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;http://www.drhorrible.com&quot;&gt;&lt;img src=&quot;http://www.drhorrible.com/images/banners/banner2.gif&quot; border=&quot;0&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
Yay! It's free untill tomorrow (sunday 20th of july), after that you have to either wait for the DVD or purchase the series in the american iTunes music store.</column>
            <column name="post_title">New Awesomeness from Joss Whedon!</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">new-awesomeness-from-joss-whedon</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2008-07-19 08:08:49</column>
            <column name="post_modified_gmt">2008-07-19 06:08:49</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=60</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">74</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:20:17</column>
            <column name="post_date_gmt">2009-01-28 19:20:17</column>
            <column name="post_content">&lt;em&gt;Full source code can be downloaded from project home at &lt;a href=&quot;http://kjeldahlnilsson.net/portfolio.php&quot;&gt;kjeldahlnilsson.net&lt;/a&gt;.&lt;/em&gt;

&lt;em&gt;Part&lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt; &lt;/a&gt;&lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, 4, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

In the last installment we set up a &quot;test bench&quot; web page. Now we are going to start implementing user input, as well as the most basic graphics primitives needed for our game.

&lt;strong&gt;Square one&lt;/strong&gt;

Let's start with the simplest thing possible in the graphics department: paint a single tile of color in the browser window.

&lt;em&gt;test.js:&lt;/em&gt;

&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    testDrawSingleSquare: function() {
        Graphics.clearGameContainer();
        var square = Graphics.createRectangleDiv(&quot;purple&quot;, 400, 400, 20, 20);
    },&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

We are going to use normal CSS and DOM scripting to accomplish this (there are other approaches to drawing custom graphics in the browser, but they have some drawbacks. We'll discuss this later.)

We add a &lt;em&gt;div&lt;/em&gt; element to the body of the testbench html page, naming it &quot;gameContainer&quot;. The graphics methods will add, remove and update child div elements in the gameContainer area.

&lt;em&gt;graphics.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var Graphics = {

    getGameContainer: function() {
        return document.getElementById(&quot;gameContainer&quot;);
    },

    clearGameContainer: function() {
        var node = this.getGameContainer();

        if (node.hasChildNodes()) {
            while (node.childNodes.length &gt;= 1) {
                node.removeChild(node.firstChild);
            }
        }
    },

    removeNodeFromGameContainer: function(node) {
        try {
            this.getGameContainer().removeChild(node);
        }
        catch(err) {
            // If no such node, fine.
        }
    },

    createRectangleDiv: function(bgcolor, x, y, width, height, zIndex) {
        var rect = document.createElement('div');

        rect.style.position = &quot;absolute&quot;;
        rect.style.top = y + &quot;px&quot;;
        rect.style.left = x + &quot;px&quot;;
        rect.style.zIndex = &quot;0&quot;;
        rect.style.height = height + &quot;px&quot;;
        rect.style.width = width + &quot;px&quot;;
        rect.style.backgroundColor = bgcolor;

        this.getGameContainer().appendChild(rect);

        return rect;
    }
};&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;
Running the test yields this tremendously impressive result:

&lt;img class=&quot;alignnone size-full wp-image-137&quot; title=&quot;quicktetrissquaretest&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/quicktetrissquaretest.jpg&quot; alt=&quot;quicktetrissquaretest&quot; width=&quot;400&quot; height=&quot;457&quot; /&gt;

&lt;strong&gt;Moving it&lt;/strong&gt;

Moving along to user input, we need to make sure we pick up input events and map some of the keys to specific actions. Our first test simply sets up a visual echo of the key input.

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    testDetectKeys: function() {
        Graphics.clearGameContainer();
        Graphics.drawString(&quot;Press a key&quot;, 400, 400);

        // Register key mapping
        setKeyReaction(function(keyCode) {
            switch (keyCode) {
            case DIR_KEY_DOWN:
                Graphics.drawString(&quot;down key pressed&quot;, 400, 400);
                break;
            case DIR_KEY_UP:
                Graphics.drawString(&quot;up key pressed&quot;, 400, 400);
                break;
            case DIR_KEY_LEFT:
                Graphics.drawString(&quot;left key pressed&quot;, 400, 400);
                break;
            case DIR_KEY_RIGHT:
                Graphics.drawString(&quot;right key pressed&quot;, 400, 400);
                break;
            case SPACE_KEY:
                Graphics.drawString(&quot;space key pressed&quot;, 400, 400);
                break;
            default:
                Graphics.drawString('KeyCode ' + keyCode + ' not handled by test case.', 400, 400);
            }
        });
    },&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

For this to work we need some graphical output of strings, so we add this method to the Graphics object above:

&lt;em&gt;graphics.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    drawnString: null,
    drawString: function(text, x, y) {

        if (this.drawnString) {
            this.removeNodeFromGameContainer(drawnString);
        }

        drawnString = document.createElement('div');

        drawnString.style.top = y + &quot;px&quot;;
        drawnString.style.left = x + &quot;px&quot;;
        var txtNode = document.createTextNode(text);
        drawnString.appendChild(txtNode);

        this.getGameContainer().appendChild(drawnString);
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Next up: a reliable cross-browser way of detecting key presses.

&lt;em&gt;util.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;function setKeyReaction(keyEventHandler) {
    document.onkeydown = function(e) {
        if (window.event) // IE
        {
            keyEventHandler(window.event.keyCode);
        }
        else if (e.which) // Netscape/Firefox/Opera
        {
            keyEventHandler(e.which);
        }
    };
}&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

The key input test now works, echoing a string representation of the pressed keys in the test bench. Now let's try using direction keys to move a square around the screen.

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    testMoveSquare: function() {
        Graphics.clearGameContainer();

        var dronePos = {
            x: 400,
            y: 400
        };

        function moveDrone(dx, dy) {
            dronePos.x += dx;
            dronePos.y += dy;

            drone.style.left = dronePos.x;
            drone.style.top = dronePos.y;
        }

        // Create the square graphic
        var drone = Graphics.createRectangleDiv(&quot;green&quot;, dronePos.x, dronePos.y, 20, 20);

        // Register key mapping
        setKeyReaction(function(keyCode) {
            switch (keyCode) {
            case DIR_KEY_DOWN:
                moveDrone(0, 5);
                break;
            case DIR_KEY_UP:
                moveDrone(0, -5);
                break;
            case DIR_KEY_LEFT:
                moveDrone( - 5, 0);
                break;
            case DIR_KEY_RIGHT:
                moveDrone(5, 0);
                break;
            default:
                //KeyCode not handled by test case
                Graphics.drawString('Use direction keys to move', 400, 400);
            }
        });
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

&lt;strong&gt;Set the stage&lt;/strong&gt;

We have a very simple tetris tile to play with now. The next ingredient is the playing field.

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    testDrawPlayingField: function() {
        Graphics.clearGameContainer();
        Field.init(&quot;magenta&quot;, &quot;blue&quot;, 400, 100); // Set up field state
        Field.tileOn(0, 0);
        Field.tileOn(1, 1);
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

We want a two dimensional grid of (sometimes visible) colored tiles. Now we start to enjoy those augmentations we did to &lt;strong&gt;Array&lt;/strong&gt; earlier on.

&lt;em&gt;field.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var Field = {

    // no of tiles
    WIDTH: 12,
    // no of tiles
    HEIGHT: 20,

    State: {
        gridState: null,
        gridTiles: null,
        gridBackground: null,
        // Absolute px position of field left border in window
        posX: 0,
        // Absolute px position of field top border in window
        posY: 0
    },

    init: function(fieldColor, backgroundColor, posX, posY) {
        this.State.posX = posX;
        this.State.posY = posY;
        this.State.gridBackground = Graphics.createFieldBackground(fieldcolor, this.State.posX, this.State.posY, (Piece.State.tileWidth * this.WIDTH), (Piece.State.tileHeight * this.HEIGHT));
        this.State.gridState = get2dArray(this.WIDTH, this.HEIGHT, 0);
        this.State.gridTiles = this.createHiddenTileArray(this.State.posX, this.State.posY, this.WIDTH, this.HEIGHT, backgroundColor, Piece.State.tileWidth, Piece.State.tileHeight);
    },

    createHiddenTileArray: function(posX, posY, matrixWidth, matrixHeight, color, tileWidth, tileHeight) {
        var matrix = get2dArray(matrixWidth, matrixHeight, 0);
        return matrix.map(function(element, x, y) {
            element = Graphics.createRectangleDiv(color, posX + (tileWidth * x), posY + (tileHeight * y), tileWidth, tileHeight);
            element.style.visibility = &quot;hidden&quot;;
            return element;
        });
    },

    tileOn: function(x, y) {
        if (posWithinField(x, y)) {
            this.State.gridState[x][y] = 1;
            this.State.gridTiles[x][y].style.visibility = &quot;visible&quot;;
        }
    },

    tileOff: function(x, y) {
        if (posWithinField(x, y)) {
            this.State.gridState[x][y] = 0;
            this.State.gridTiles[x][y].style.visibility = &quot;hidden&quot;;
        }
    },

    isTileOn: function(x, y) {
        if (posWithinField(x, y)) {
            return (this.State.gridState[x][y]);
        }
    },

    posWithinField: function(x, y) {
        return ((x &gt;= 0) &amp;&amp; (y&gt;= 0) &amp;&amp;
           (x &lt;= Piece.State.tileWidth * this.WIDTH) &amp;&amp;
           (y &lt;= Piece.State.tileHeight * this.HEIGHT))
    }
};&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Voilà:

&lt;img class=&quot;alignnone size-full wp-image-162&quot; title=&quot;quicktetrisfieldtest&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/quicktetrisfieldtest.jpg&quot; alt=&quot;quicktetrisfieldtest&quot; width=&quot;736&quot; height=&quot;566&quot; /&gt;

In our next installment we'll set up interaction between moving pieces and the tetris board.</column>
            <column name="post_title">Javascript Tetris Pt 4: Graphics &amp; Input</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-4-graphics-input</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=78
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=73
http://kjeldahlnilsson.net/blog/?p=75
http://kjeldahlnilsson.net/blog/?p=77
http://kjeldahlnilsson.net/blog/?p=76</column>
            <column name="post_modified">2010-05-15 18:49:34</column>
            <column name="post_modified_gmt">2010-05-15 17:49:34</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=74</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">75</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:22:12</column>
            <column name="post_date_gmt">2009-01-28 19:22:12</column>
            <column name="post_content">&lt;em&gt;Full source code can be downloaded from project home at &lt;a href=&quot;http://kjeldahlnilsson.net/portfolio.php&quot;&gt;kjeldahlnilsson.net&lt;/a&gt;.&lt;/em&gt;

&lt;em&gt;Part &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, 5, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

In this installment we are going to set up the proper four-tile tetris piece and its interaction with the playing field. Be warned; this is the installment where we write most of our code. Grab some coffee before we start. :)

We will add a single functional, visual test for the piece and field interaction. I started out with separate tests for painting the piece, moving it, collision detection and so forth. However, in the end I found a single test sufficed to check all these things - so we'll simply use that, keeping our code walkthrough somewhat brief.

The test sets up the playing piece, the play field, and behavior for user input: movement, rotation and switching the shape of the tetris piece.

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt; 
&lt;pre lang=&quot;javascript&quot;&gt; testPieceCollision: function() {
        Graphics.clearGameContainer();

        Field.init(&quot;blue&quot;, 400, 100);
        Piece.init();

        // Register key mapping
        setKeyReaction(function(keyCode) {
            switch (keyCode) {
            case DIR_KEY_DOWN:
                Piece.moveDown(15);
                break;
            case DIR_KEY_UP:
                Piece.moveUp(15);
                break;
            case DIR_KEY_LEFT:
                Piece.moveLeft(Piece.State.tileWidth);
                break;
            case DIR_KEY_RIGHT:
                Piece.moveRight(Piece.State.tileWidth);
                break;
            case NUM_KEY_ONE:
                Piece.toggleSquareShape();
                break;
            case NUM_KEY_TWO:
                Piece.toggleLineShape();
                break;
            case NUM_KEY_THREE:
                Piece.toggleTeeShape();
                break;
            case NUM_KEY_FOUR:
                Piece.toggleRHookShape();
                break;
            case NUM_KEY_FIVE:
                Piece.toggleLHookShape();
                break;
            case NUM_KEY_SIX:
                Piece.toggleRightLShape();
                break;
            case NUM_KEY_SEVEN:
                Piece.toggleLeftLShape();
                break;
            case SPACE_KEY:
                Piece.rotate(true);
                break;
            default:
                Graphics.drawString('Direction keys moves, space rotates, 1-5 changes piece type', 400, 400);
            }
        });
    },&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

In Tetris, the playing piece is made up of four tiles. We have seven shapes - seven basic ways of ways of grouping the four tiles.

&lt;img class=&quot;alignnone size-full wp-image-464&quot; title=&quot;tetrispiecetypes&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/tetrispiecetypes.jpg&quot; alt=&quot;tetrispiecetypes&quot; width=&quot;360&quot; height=&quot;120&quot; /&gt;

All of these piece types can be rotated in ninety degree steps, giving us up to four different shapes per piece type. All piece shapes, no matter their rotation, fit inside a 4*4 grid... another two dimensional array. We'll define the possible shapes of the tetris piece as array literals. I'll limit the code listing to the possible shapes for the &quot;T&quot; piece type, for brevitys sake:

&lt;em&gt;piece.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;//   x
//  xxx : tee
var tee0dg =
[[0, 0, 1, 0],
 [0, 1, 1, 1],
 [0, 0, 0, 0],
 [0, 0, 0, 0]];

var tee90dg =
[[0, 0, 1, 0],
 [0, 0, 1, 1],
 [0, 0, 1, 0],
 [0, 0, 0, 0]];

var tee180dg =
[[0, 0, 0, 0],
 [0, 1, 1, 1],
 [0, 0, 1, 0],
 [0, 0, 0, 0]];

var tee270dg =
[[0, 0, 1, 0],
 [0, 1, 1, 0],
 [0, 0, 1, 0],
 [0, 0, 0, 0]];

var teeRotations = [tee0dg, tee90dg, tee180dg, tee270dg];&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Finally we wrap the possible rotated shapes in an array, so we hold all possible rotated shapes of that piece type in one place. We do the same for all other piece shapes.

Now we have everything we need to define the playing piece and its behavior.

&lt;em&gt;piece.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var Piece = {

    State: {
        piecePos: {
            x: 0,
            y: 0
        },
        color: &quot;black&quot;,
        currRotation: squareRotations[0],
        currShape: squareRotations,
        rotationCounter: 0,
        // The four sprites that make up the piece
        tiles: [null, null, null, null],
        tileWidth: 23,
        tileHeight: 30
    },

    init: function(color) {

        rotationCounter = 0;

        var width = this.State.tileWidth;
        var height = this.State.tileHeight;

        if (!color) { // Assume colorful diagnostic pattern
            this.State.tiles[0] = Graphics.createRectangleDiv(&quot;green&quot;, 0, 0, width, height);
            this.State.tiles[1] = Graphics.createRectangleDiv(&quot;yellow&quot;, 0, 0, width, height);
            this.State.tiles[2] = Graphics.createRectangleDiv(&quot;orange&quot;, 0, 0, width, height);
            this.State.tiles[3] = Graphics.createRectangleDiv(&quot;red&quot;, 0, 0, width, height);
        }
        else {
            this.State.tiles[0] = Graphics.createRectangleDiv(color, 0, 0, width, height);
            this.State.tiles[1] = Graphics.createRectangleDiv(color, 0, 0, width, height);
            this.State.tiles[2] = Graphics.createRectangleDiv(color, 0, 0, width, height);
            this.State.tiles[3] = Graphics.createRectangleDiv(color, 0, 0, width, height);
        }

        this.reset();
    },

    // Reset piece pos to middle of middle, top
    reset: function() {
        this.State.piecePos.x = Field.State.posX + ((Field.WIDTH / 2) * this.State.tileWidth) - (2 * this.State.tileWidth);
        this.State.piecePos.y = Field.State.posY - (this.State.tileHeight * 2);
        this.setRandomShape();
        this.redraw();
    },

    drawSingleTile: function(xSlot, ySlot, tileNo) {
        var derivedX = this.State.piecePos.x + (xSlot * this.State.tileWidth);
        var derivedY = this.State.piecePos.y + (ySlot * this.State.tileHeight);
        this.State.tiles[tileNo].style.top = derivedY;
        this.State.tiles[tileNo].style.left = derivedX;
    },

    redraw: function() {
        var tileCounter = 0;
        this.State.currRotation.eachWithIndexes(function(element, x, y) {
            if (element === 1) { // Is the matrix slot ticked?
                Piece.drawSingleTile(x, y, tileCounter);
                tileCounter++;
            }
        });
        tileCounter = 0;
    },

    move: function(dx, dy) {
        var directionIsDown = (dy &gt; 0);

        var collisionCheck = Field.checkCollisions(this.State.piecePos.x, this.State.piecePos.y, this.State.currRotation, directionIsDown, dx, dy);
        if (collisionCheck.collides) {
            if (collisionCheck.sticks) {
                Field.mergeShapeIntoField(this.State.piecePos.x, this.State.piecePos.y, this.State.currRotation);
                this.reset();
                this.isGameOver();
            }
        }
        else {
            this.State.piecePos.x += dx;
            this.State.piecePos.y += dy;
            this.redraw();
        }
    },

    moveUp: function(speed) {
        this.move(0, -(speed));
    },
    moveDown: function(speed) {
        this.move(0, speed);
    },
    moveLeft: function(speed) {
        this.move( - (speed), 0);
    },
    moveRight: function(speed) {
        this.move(speed, 0);
    },

    setRandomShape: function() {
        var random = Math.floor(Math.random() * 7);

        switch (random) {
        case 0:
            this.toggleSquareShape();
            break;
        case 1:
            this.toggleLineShape();
            break;
        case 2:
            this.toggleTeeShape();
            break;
        case 3:
            this.toggleRHookShape();
            break;
        case 4:
            this.toggleLHookShape();
            break;
        case 5:
            this.toggleRightLShape();
            break;
        case 6:
            this.toggleLeftLShape();
            break;
        }
    },

    rotate: function(doCollisionCheck) {
        this.State.rotationCounter++;
        if (this.State.rotationCounter == this.State.currShape.length) {
            this.State.rotationCounter = 0;
        }

        if (doCollisionCheck) {
            var collisionCheck = Field.checkCollisions(this.State.piecePos.x, this.State.piecePos.y, this.State.currShape[this.State.rotationCounter], false, 0, 0);
            if (collisionCheck.collides) {
                return;
            }
        }

        this.State.currRotation = this.State.currShape[this.State.rotationCounter];
        this.redraw();
    },

    resetRotation: function() {
        this.State.currRotation = this.State.currShape[0];
        this.State.rotationCounter = 0;
        this.redraw();
    },

    toggleSquareShape: function() {
        this.State.currShape = squareRotations;
        this.resetRotation();
    },

    toggleLineShape: function() {
        this.State.currShape = lineRotations;
        this.resetRotation();
    },

    toggleTeeShape: function() {
        this.State.currShape = teeRotations;
        this.resetRotation();
    },

    toggleRHookShape: function() {
        this.State.currShape = rhookRotations;
        this.resetRotation();
    },

    toggleLHookShape: function() {
        this.State.currShape = lhookRotations;
        this.resetRotation();
    },

    toggleLeftLShape: function() {
        this.State.currShape = leftLRotations;
        this.resetRotation();
    },

    toggleRightLShape: function() {
        this.State.currShape = rightLRotations;
        this.resetRotation();
    }

};&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Whew. The final task is to define how the field behaves when the playing piece touches its borders, or other tiles on the field. In other words, collision detection. The &lt;strong&gt;Field&lt;/strong&gt; object will take the playing piece position, shape, direction and speed and determine two things: will the piece collide with anything? If it collides, does it also stick to that surface? If it does, the &lt;strong&gt;Piece&lt;/strong&gt; will, as defined above, ask &lt;strong&gt;Field&lt;/strong&gt; to merge its shape into the current position in the &lt;strong&gt;Field&lt;/strong&gt; grid.

We add the following members to the &lt;strong&gt;Field&lt;/strong&gt; object literal (which we started defining in yesterdays blog post):

&lt;em&gt;field.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    CollisionData: {
        collides: false,
        sticks: false
    },

    checkCollisions: function(xPos, yPos, shapeArray, directionIsDown, dx, dy) {
        if (this.State.gridState) {
            var fieldCollision = this.pieceCollidesWithField(xPos, yPos, shapeArray, directionIsDown, dx, dy);
            var boundaryCollision = this.pieceCollidesWithFloorOrWall(xPos, yPos, shapeArray, directionIsDown, dx, dy);
            var collisionResult = Object.create(this.CollisionData);
            collisionResult.collides = fieldCollision.collides || boundaryCollision.collides;
            collisionResult.sticks = fieldCollision.sticks || boundaryCollision.sticks;
            return collisionResult;
        }
    },

    pieceCollidesWithField: function(xPos, yPos, shapeArray, directionIsDown, dx, dy) {
        var collision = Object.create(this.CollisionData);

        shapeArray.eachWithIndexes(function(element, x, y) {
            if (!element || (collision &amp;&amp; collision.collides)) {
                return;
            }

            var tileXPos = xPos + (Piece.State.tileWidth * x) + dx;
            var tileYPos = yPos + (Piece.State.tileHeight * y) + 1;
            var movingRect = makeRect(tileXPos, tileYPos, Piece.State.tileWidth, Piece.State.tileHeight);

            Field.State.gridTiles.eachWithIndexes(function(tile, arrX, arrY) {
                if (collision.collides) {
                    return;
                }

                if (Field.isTileOn(arrX, arrY)) { // Only  collision if tile is actually switched on
                    var tileX = Field.State.posX + (Piece.State.tileWidth * arrX);



                    var tileY = Field.State.posY + (Piece.State.tileHeight * arrY);
                    var fieldRect = makeRect(tileX, tileY, Piece.State.tileWidth, Piece.State.tileHeight);
                    collision.collides = intersectRect(movingRect, fieldRect);

                    if (collision.collides &amp;&amp; directionIsDown) {
                        collision.sticks = true;

                    }
                }
            });
        });

        return collision;
    },

    pieceCollidesWithFloorOrWall: function(xPos, yPos, shapeArray, directionIsDown, dx, dy) {
        var collision;

        shapeArray.eachWithIndexes(function(element, x, y) {
            if (!element || (collision &amp;&amp; collision.collides)) {
                return;
            }

            collision = Object.create(Field.CollisionData);

            // Check for floor collision
            var tileYPos = yPos + (Piece.State.tileHeight * y) + 1;
            var tileBottom = tileYPos + Piece.State.tileHeight;
            var fieldBottom = Field.State.posY + (Piece.State.tileHeight * Field.HEIGHT);
            collision.collides = (tileBottom &gt; fieldBottom);
            collision.sticks = directionIsDown;

            // Check for wall collision (if no floor collision)
            if (!collision.collides) {
                var tileXPos = xPos + (Piece.State.tileWidth * x) + dx;
                var tileLeft = tileXPos;
                var tileRight = tileXPos + Piece.State.tileWidth;
                var fieldLeft = Field.State.posX;
                var fieldRight = Field.State.posX + (Piece.State.tileWidth * Field.WIDTH);
                collision.collides = (tileLeft &lt; fieldLeft || tileRight &gt; fieldRight);
            }
        });

        return collision;
    },

    mergeShapeIntoField: function(xPos, yPos, shapeArray) {
        shapeArray.eachWithIndexes(function(element, x, y) {
            if (element) {
                var tileAbsoluteXPos = xPos + (Piece.State.tileWidth * x);
                var tileAbsoluteYPos = yPos + (Piece.State.tileHeight * y);
                var tileXPosInField = tileAbsoluteXPos - Field.State.posX;
                var tileYPosInField = tileAbsoluteYPos - Field.State.posY;
                var tileXLocationInField = tileXPosInField / Piece.State.tileWidth;
                var tileYLocationInField = Math.round(tileYPosInField / Piece.State.tileHeight);
                Field.tileOn(tileXLocationInField, tileYLocationInField);
            }
        });

        Field.doRowClears();
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

I'm not completely happy with the &lt;strong&gt;pieceCollides*()&lt;/strong&gt; methods. Some of the variable names could be clearer. Checking the entire field for collisions is a little brute force (collision can only occur in the field tiles overlapping and directly surrounding the piece). The calculation of coordinates could be simplified by having &lt;strong&gt;Piece&lt;/strong&gt; use coordinates relative to &lt;strong&gt;Field&lt;/strong&gt;. And methods with more than two levels worth of nested blocks are just asking for an additional method extract. This implementation does the job well enough for now, however.

Once the playing piece has &quot;stuck&quot; and been merged into the field, we check if any rows have been completely filled in the playing field - these should be cleared, and the pieces above should be shuffled down. We'll hold off implementing &lt;strong&gt;doRowClears()&lt;/strong&gt;, however - todays installment is already running a little long. :)

In the next part we'll finish the piece-field interaction. We'll also add some visual and aural interest to the game.</column>
            <column name="post_title">Javascript Tetris Pt 5: The Life Of A Piece</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-5-the-life-of-a-piece</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=78
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=73
http://kjeldahlnilsson.net/blog/?p=74
http://kjeldahlnilsson.net/blog/?p=77
http://kjeldahlnilsson.net/blog/?p=76</column>
            <column name="post_modified">2010-05-15 18:49:38</column>
            <column name="post_modified_gmt">2010-05-15 17:49:38</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=75</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">76</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:26:49</column>
            <column name="post_date_gmt">2009-01-28 19:26:49</column>
            <column name="post_content">&lt;em&gt;Full source code can be downloaded from project home at &lt;a href=&quot;http://kjeldahlnilsson.net/portfolio.php&quot;&gt;kjeldahlnilsson.net&lt;/a&gt;.&lt;/em&gt;

&lt;em&gt;Part &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=77&quot;&gt;6&lt;/a&gt;, 7, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

Today we finally get to strap together the actual game. Most of the work is already done by now - we just need to assemble the components. Let's start by handling transitions between three basic game states; intro screen, playing the game, and game over.

&lt;em&gt;main.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var QuickTetris = {

    gameModes: {
        titleScreen: &quot;titleScreen&quot;,
        gamePlay: &quot;gamePlay&quot;,
        gameOver: &quot;gameOver&quot;
    },

    gameMode: null,

    gotoTitleScreen: function() {
        this.gameMode = this.gameModes.titleScreen;
        Graphics.clearGameContainer();

        Graphics.drawString(&quot;- PRESS SPACE TO START -&quot;, 0, 0);

        setKeyReaction(function(keyCode) {
            if (keyCode === SPACE_KEY) {
                QuickTetris.gotoGamePlay();
            }
        });
    },

    gotoGameOver: function() {
        this.gameMode = this.gameModes.gamePlay;
        Graphics.clearGameContainer();

        Graphics.drawString(&quot;- PRESS SPACE TO RETRY -&quot;, 0, 0);

        setKeyReaction(function(keyCode) {
            if (keyCode === SPACE_KEY) {
                QuickTetris.gotoGamePlay();
            }
        });
    },

    gotoGamePlay: function() {
        this.gameMode = this.gameModes.gamePlay;
        Graphics.clearGameContainer();

        this.dropSpeed = 3;

        var fieldXPos = this.getFieldCenteredXPos();

        Field.init(&quot;white&quot;, &quot;white&quot;, fieldXPos, 50);
        Piece.init(&quot;white&quot;);

        setKeyMemory();
    }

};&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;
See that final call to &lt;strong&gt;setKeyMemory()&lt;/strong&gt;? Instead of immediately reacting to keypresses, like we did in the tests previously, we instead store the last pressed key in a global variable. Our game then reacts to that stored event regularly during each pass of the game loop, preventing user input from disrupting the flow of the game.

&lt;em&gt;util.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var currentKeyPress = null;
function setKeyMemory() {
    document.onkeydown = function(e) {
        if (window.event) // IE
        {
            currentKeyPress = window.event.keyCode;
        }
        else if (e.which) // Netscape/Firefox/Opera
        {
            currentKeyPress = e.which;
        }
    };
    document.onkeyup = function(e) {
        currentKeyPress = null;
    };
}&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

The heart of a typical game is the &lt;a title=&quot;Game loop&quot; href=&quot;http://en.wikipedia.org/wiki/Game_programming#The_game_loop&quot;&gt;game loop&lt;/a&gt;. For every pass of this loop we react to user input, move the piece downwards in the playing field, and (sometimes) adjust the difficulty of the game. Let's add that to the &lt;strong&gt;Quicktetris&lt;/strong&gt; object above:

&lt;em&gt;main.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    gameLoop: function() {
        if (QuickTetris.gameMode === QuickTetris.gameModes.gamePlay) {
            QuickTetris.reactToKeyPress(currentKeyPress);
            QuickTetris.adjustDifficulty();
            Piece.moveDown(QuickTetris.dropSpeed);
        }
    },

    reactToKeyPress: function(keyCode) {
        if (currentKeyPress === null) {
            return;
        }

        switch (keyCode) {
        case DIR_KEY_DOWN:
            Piece.moveDown(15);
            break;
        case DIR_KEY_LEFT:
            Piece.moveLeft(Piece.State.tileWidth);
            break;
        case DIR_KEY_RIGHT:
            Piece.moveRight(Piece.State.tileWidth);
            break;
        case SPACE_KEY:
            Piece.rotate(true);
            break;
        }

        //Reset key
        currentKeyPress = null;
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Finally we need a way of launching the game. We create our default index.html page, which, after loading, calls &lt;strong&gt;Quicktetris.startDefaultGameLoop()&lt;/strong&gt;:

&lt;em&gt;main.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    startDefaultGameLoop: function() {
        this.gotoTitleScreen();

        // Launch game loop - set it to fire every X milliseconds
        setInterval(this.gameLoop, 50); // Attempting 20 FPS
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

Aaand we're done! Go on, &lt;a href=&quot;http://kjeldahlnilsson.net/projects/quicktetris/&quot;&gt;try it out&lt;/a&gt; yourself!:)

We'll do a brief post mortem summary of the project in the next and final part.</column>
            <column name="post_title">Javascript Tetris Pt 7: Gameplay</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-7-gameplay</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=73
http://kjeldahlnilsson.net/blog/?p=74
http://kjeldahlnilsson.net/blog/?p=75</column>
            <column name="post_modified">2010-05-15 18:49:46</column>
            <column name="post_modified_gmt">2010-05-15 17:49:46</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=76</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">77</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-01-28 21:23:35</column>
            <column name="post_date_gmt">2009-01-28 19:23:35</column>
            <column name="post_content">&lt;em&gt;Full source code can be downloaded from project home at &lt;a href=&quot;http://kjeldahlnilsson.net/portfolio.php&quot;&gt;kjeldahlnilsson.net&lt;/a&gt;.&lt;/em&gt;

&lt;em&gt;Part &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=71&quot;&gt;1&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=72&quot;&gt;2&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=73&quot;&gt;3&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=74&quot;&gt;4&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=75&quot;&gt;5&lt;/a&gt;, 6, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=76&quot;&gt;7&lt;/a&gt;, &lt;a href=&quot;http://kjeldahlnilsson.net/blog/?p=78&quot;&gt;8&lt;/a&gt;&lt;/em&gt;

The game looks very prototype-ish right now. We're not shooting for &lt;a href=&quot;http://www.epicgames.com/&quot;&gt;blockbuster level presentation&lt;/a&gt; here, but we should at least provide a bare minimum of animation and audio feedback. Let's do something about that by adding animation, making the playing field a little more interesting, plus some support for sound effects and music.

First off; some sort animation payoff when the player clears one or more rows. We want a sort of stylized explosion to occur. Let's create that separately first. We'll achieve this by applying a &lt;a href=&quot;http://ui.jquery.com/&quot;&gt;JQuery UI&lt;/a&gt; effect to a div while hiding it.

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    testExplodeAnimation: function() {
        Graphics.clearGameContainer();
        var square = Graphics.createRectangleDiv(&quot;black&quot;, 400, 400, 100, 100);
        $(square).hide(&quot;explode&quot;, {},
        1000);
    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;
This works, and looks cool. Now we'll finish the &lt;strong&gt;Field.doRowClears()&lt;/strong&gt; method from yesterday, including some animation when we remove the filled rows in the field.

&lt;em&gt;field.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    doRowClears: function() {
        var rowsToClear = [];

        this.State.gridState.eachRowWithIndex(function(row, rowNumber) {
            var entireRowFilled = true;

            // Is row filled?
            for (var tile in row) {
                if (row[tile] === 0) {
                    entireRowFilled = false;
                    break;
                }
            }

            // Set row to be cleared
            if (entireRowFilled) {
                rowsToClear.push(rowNumber);
            }
        });

        if (rowsToClear.length &gt; 0) {
            this.explodeAndClearRows(rowsToClear);
        }
    },

    explodeAndClearRows: function(rowsToExplode) {

        // Set up big animation rectangle to cover the disappearing rows
        var topRow = 1000;
        var bottomRow = 0;
        for (var row in rowsToExplode) {
            if (rowsToExplode.hasOwnProperty(row)) {
                if (topRow &gt; rowsToExplode[row]) {
                    topRow = rowsToExplode[row];
                }
                if (bottomRow &lt; rowsToExplode[row]) {
                    bottomRow = rowsToExplode[row];
                }
            }
        }

        var rowsTotalTopY = this.State.posY + (topRow * Piece.State.tileHeight);
        var rowsTotalBottomY = this.State.posY + (bottomRow * Piece.State.tileHeight) + Piece.State.tileHeight;
        var rowsTotalHeight = rowsTotalBottomY - rowsTotalTopY;

        var explodingRect = Graphics.createRectangleDiv(&quot;#C0ADFF&quot;, this.State.posX, rowsTotalTopY, Piece.State.tileWidth * this.WIDTH, rowsTotalHeight, 10);

        // Clear the actual tiles in grid before animating the large rectangle
        for (row in rowsToExplode) {
            if (rowsToExplode.hasOwnProperty(row)) {
                this.clearRow(rowsToExplode[row]);
            }
        }

        // Use JQuery UI effect to &quot;explode&quot; the big rectangle
        $(explodingRect).hide(&quot;explode&quot;, {},
        1500);

        // Clean up
        Graphics.removeNodeFromGameContainer(explodingRect);

        // Shuffle remaining higher tiles downwards in field
        for (row in rowsToExplode) {
            if (rowsToExplode.hasOwnProperty(row)) {
                this.shiftTilesDownToRowX(rowsToExplode[row]);
            }
        }
    },

    clearRow: function(rowNo) {
        for (x = 0; x &lt; this.State.gridState.length; x++) {
            this.tileOff(x, rowNo);
        }
    },

    shiftTilesDownToRowX: function(clearedRowY) {
        for (var y = (clearedRowY - 1); y &gt;= 0; y--) { // Start at bottom to cascade tiles
            for (var x = 0; x &lt; this.State.gridState.length; x++) {
                // Shuffle tile state down
                if (this.isTileOn(x, y)) {
                    this.tileOff(x, y);
                    this.tileOn(x, y + 1);
                }
                else {
                    this.tileOff(x, y + 1);
                }
            }
        }

    }&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

We also want to improve the appearance of the playing field somewhat; solid magenta is handy for raw testing but not exactly visually appealing in a finished game. Let's add a background graphic by updating &lt;strong&gt;Graphics.createFieldBackground()&lt;/strong&gt;:

&lt;em&gt;graphics.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    createFieldBackground: function(bgcolor, x, y, width, height) {
        var rect = document.createElement('div');

        rect.style.position = &quot;absolute&quot;;
        rect.style.top = y + &quot;px&quot;;
        rect.style.left = x + &quot;px&quot;;
        rect.style.zIndex = &quot;-1&quot;;
        rect.style.height = height + &quot;px&quot;;
        rect.style.width = width + &quot;px&quot;;
        rect.style.backgroundColor = bgcolor;

        rect.style.backgroundImage = &quot;url('assets/images/gameplayScreen.png')&quot;;
        rect.style.backgroundRepeat = &quot;no-repeat&quot;;
        rect.style.backgroundPosition = &quot;0px 0px&quot;;

        this.getGameContainer().appendChild(rect);

        return rect;
    },&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

&lt;img class=&quot;alignnone size-medium wp-image-344&quot; title=&quot;collisiontestUpdatedBackground&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/01/collisiontest-300x294.jpg&quot; alt=&quot;collisiontestUpdatedBackground&quot; width=&quot;300&quot; height=&quot;294&quot; /&gt;

Much better. The background picture is simply an image pulled from a random &quot;mountains&quot; search on &lt;a href=&quot;http://flickr.com&quot;&gt;Flickr&lt;/a&gt;, then cropped and tweaked a bit in &lt;a href=&quot;http://www.paint.net/&quot;&gt;Paint.Net&lt;/a&gt;.

We'll wrap up todays installment by adding support for sound and music. I found an elegant little library called Soundmanager. &lt;a href=&quot;http://www.schillmania.com/projects/soundmanager/&quot;&gt;Soundmanager&lt;/a&gt; creates and wraps a hidden Flash component in the page, enabling us to seamlessly load and play mp3 files (or other media):

&lt;em&gt;test.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;    testPlaySound: function() {
	Sound.playLandingSound();
    },

    testPlaySoundLooped: function() {
	Sound.playLoopedLandingSound();
    },

    testPlayMusic: function() {
	Sound.playAmbientMusic();
    },&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;

We then create our &lt;strong&gt;Sound&lt;/strong&gt; object, wrapping the functionality we need from SoundManager to load and play audio.

&lt;em&gt;sound.js:&lt;/em&gt;
&lt;code&gt;
&lt;pre lang=&quot;javascript&quot;&gt;var Sound = {

    SoundBank: {
        rotation: &quot;rotation&quot;,
        landing: &quot;landing&quot;,

        clearedOneRow: &quot;clearedOneRow&quot;,
        clearedTwoRows: &quot;clearedTwoRows&quot;,
        clearedThreeRows: &quot;clearedThreeRows&quot;,
        clearedFourRows: &quot;clearedFourRows&quot;,

        ambientMusic: &quot;ambientMusic&quot;
    },

    loadSounds: function() {
        soundManager.createSound(this.SoundBank.rotation, 'assets/sound/rotation.mp3');
        soundManager.createSound(this.SoundBank.landing, 'assets/sound/landing.mp3');
        soundManager.createSound(this.SoundBank.clearedOneRow, 'assets/sound/clearedOneRow.mp3');
        soundManager.createSound(this.SoundBank.clearedTwoRows, 'assets/sound/clearedTwoRows.mp3');
        soundManager.createSound(this.SoundBank.clearedThreeRows, 'assets/sound/clearedThreeRows.mp3');
        soundManager.createSound(this.SoundBank.clearedFourRows, 'assets/sound/clearedFourRows.mp3');
        soundManager.createSound(this.SoundBank.ambientMusic, 'assets/sound/ambientMusic.mp3');
    },

    playAmbientMusic: function() {
        playLooped(this.SoundBank.ambientMusic);
    },

    playRotationSound: function() {
        soundManager.play(this.SoundBank.rotation);
    },

    playLandingSound: function() {
        soundManager.play(this.SoundBank.landing);
    },

    playLoopedLandingSound: function() {
        playLooped(this.SoundBank.landing);
    },

    playClearedSound: function(level) {
        if (!level || level &lt; 4 || level &gt; 1) {
            return;
        }

        switch (level) {
        case 1:
            soundManager.play(this.SoundBank.clearedOneRow);
            break;
        case 2:
            soundManager.play(this.SoundBank.clearedTwoRows);
            break;
        case 3:
            soundManager.play(this.SoundBank.clearedThreeRows);
            break;
        case 4:

            soundManager.play(this.SoundBank.clearedFourRows);
            break;
        }
    },

};

// Looping sound support
playLooped: function playLooped(soundID) {
    window.setTimeout(function() {
        soundManager.play(soundID, {
            onfinish: function() {
                playLooped(soundID);
            }
        });
    },
    1);
};

soundManager.onload = function() {
    Sound.loadSounds();
}&lt;/pre&gt;&lt;/code&gt;&lt;br/&gt;
Sound effects and music can now be launched from the rest of the game logic.

We have most of what we need now; in the next installment we glue it all together to create a playable game!</column>
            <column name="post_title">Javascript Tetris Pt 6: Lights, Action, Music!</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-tetris-pt-6-lights-action-music</column>
            <column name="to_ping"></column>
            <column name="pinged">http://kjeldahlnilsson.net/blog/?p=71
http://kjeldahlnilsson.net/blog/?p=72
http://kjeldahlnilsson.net/blog/?p=73
http://kjeldahlnilsson.net/blog/?p=74
http://kjeldahlnilsson.net/blog/?p=75</column>
            <column name="post_modified">2010-05-15 18:49:42</column>
            <column name="post_modified_gmt">2010-05-15 17:49:42</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://thomas.kjeldahlnilsson.net/blog/?p=77</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">0</column>
        </table>
        <table name="wp_posts">
            <column name="ID">833</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-03-30 16:47:19</column>
            <column name="post_date_gmt">2009-03-30 15:47:19</column>
            <column name="post_content">&lt;em&gt;It's evening, and my home office door is closed. No email or IM clients are running on my computer. My daughter is asleep, my Significant Other is aware that I'm working. I wind up the egg timer, the clock starts ticking. My mind quickly enters a state of &lt;a title=&quot;Wikipedia definition of 'Flow'&quot; href=&quot;http://en.wikipedia.org/wiki/Flow_(psychology)&quot;&gt;Flow&lt;/a&gt;. 25 minutes later the timer rings. The feeling is akin to waking up from a dream. I stop working, and jot down a mark in my task list. A solid unit of work accomplished; another egg completed.&lt;/em&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;size-full wp-image-888 aligncenter&quot; title=&quot;eggtimer&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/03/eggtimer.jpg&quot; alt=&quot;eggtimer&quot; width=&quot;180&quot; height=&quot;240&quot; /&gt;&lt;/p&gt;

I have trouble maintaining a consistent level of productivity - especially for side projects that I work on in my spare time. Both at work and privately I find that my productivity fluctuates wildy. Sometimes I'm able to crank out quality stuff for 10 hours straight, while other days simply vanish in trivial distractions.

A possible remedy to this problem presented itself recently in the &lt;a title=&quot;Pomodoro Technique&quot; href=&quot;http://www.pomodorotechnique.com/&quot;&gt;Pomodoro Technique&lt;/a&gt; (&quot;Tomato Technique&quot;), a time management method I'd never heard of before last week. I've currently only used this system for a few days, but the early results are quite promising.

Getting started is fairly simple:
&lt;ol&gt;
	&lt;li&gt;Set up some sort of timer. A &lt;a title=&quot;mytomatoes.com online pomodoro tracker&quot; href=&quot;http://mytomatoes.com/&quot;&gt;software clock&lt;/a&gt; works, but a physical clock is better.&lt;/li&gt;
	&lt;li&gt;&lt;span&gt;Select a task that you need to accomplish, and remove possible distractions.
&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span&gt;Set the timer to 25 minutes.&lt;/span&gt;&lt;span&gt;
&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span&gt;Work on the task until the timer rings.&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span&gt;One &quot;tomato&quot; is now accomplished for the task - add a mark to the task record.
&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span&gt;Take a short break before restarting the timer - 5 minutes or so.&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span&gt; Take a longer break &lt;/span&gt;&lt;span&gt;once every four tomatoes.
&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
To me, the most obvious benefit of the technique is that it forces you to &lt;a title=&quot;Wikipedia 'Timeboxing' entry&quot; href=&quot;http://en.wikipedia.org/wiki/Time_boxing#Personal_Timeboxing&quot;&gt;timebox&lt;/a&gt; and &lt;strong&gt;really focus &lt;/strong&gt;on your work. One resulting effect for me is that I get into the elusive &quot;flow&quot; state much earlier than before. There's more to it, though.

The regular breaks provide an opportunity to periodically step back and look at the current task from a different perspective: &quot;Am I going about this in the wrong way? Maybe I'm even solving the wrong problem?&quot; This is valuable - it's easy to lose sight of the larger picture when you're head down into the specifics of a task.

Over time your ability to estimate future tasks is likely to improve, since you have a more solid appreciation (and written record) of how much effort your past work took. Besides, it's generally a good idea to measure your work in abstract work units rather than directly in clock hours (the &lt;a title=&quot;Poker Planning Game post at Coding Horror&quot; href=&quot;http://www.codinghorror.com/blog/archives/000981.html&quot;&gt;Poker Planning Game&lt;/a&gt; is another example of this phenomenon).

The final benefit of the system is the moral boost you get from continuously marking down those completed &quot;tomatoes&quot; (I personally refer to them as &quot;eggs&quot;, since I use an egg-shaped timer). Think about it; don't you feel good when you complete a feature, article or bug fix? I find that this technique gives me that same satisfaction &lt;strong&gt;every 30 minutes&lt;/strong&gt; - I may not finish that new feature tonight, but I know that every egg takes me closer to completion.

It will be interesting to see what this does for my productivity long-term. The next step in the technique is to actually start estimating future tasks in tomatoes instead of hours; I'll try that once I've gotten used to the basic workflow. I'll probably post an update in a few weeks.
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;size-full wp-image-838 aligncenter&quot; title=&quot;pomodoroTechniqueLogo&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/03/pomodorologo.jpg&quot; alt=&quot;pomodoroTechniqueLogo&quot; width=&quot;284&quot; height=&quot;178&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;

&lt;em&gt;If you found this interesting I strongly encourage you to visit the &lt;a title=&quot;Pomodoro website&quot; href=&quot;http://www.pomodorotechnique.com/&quot;&gt;Pomodoro&lt;/a&gt; website and read more yourself; there's a nice, free eBook summary available there (pdf).&lt;/em&gt;

&lt;em&gt;UPDATE: I wrote a &lt;a href=&quot;http://messynotebook.com/?p=997&quot;&gt;follow-up post&lt;/a&gt; a few months later.
&lt;/em&gt;</column>
            <column name="post_title">Eggs, Tomatoes and Time Management</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">eggs-tomatoes-and-time-management</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://messynotebook.com/?p=997</column>
            <column name="post_modified">2009-07-01 20:18:59</column>
            <column name="post_modified_gmt">2009-07-01 19:18:59</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://kjeldahlnilsson.net/blog/?p=833</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
        <table name="wp_posts">
            <column name="ID">916</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-04-14 15:22:40</column>
            <column name="post_date_gmt">2009-04-14 14:22:40</column>
            <column name="post_content">How do you determine how long something will take to build?

In an ideal world, many of us would probably like to simply work until the stakeholder/product owner decides we're done, keeping our expense meter running all along. This is (very roughly) the approach taken by agile software development methodologies such as &lt;a title=&quot;Wikipedia Scrum definition&quot; href=&quot;http://en.wikipedia.org/wiki/Scrum_(development)&quot;&gt;Scrum&lt;/a&gt;.

Unfortunately, in the real world we often need to know roughly how long something will take &lt;strong&gt;before&lt;/strong&gt; we start working on it. This is basic &lt;a title=&quot;Wikipedia 'product managment&amp;quot; entry&quot; href=&quot;http://en.wikipedia.org/wiki/Product_management&quot;&gt;product management&lt;/a&gt;: the feasability of a new project, product or feature is (in part) derived from the initially estimated cost of building it. &lt;em&gt;&quot;That new nifty feature will take more than four months to add to our product? Maybe we have better things to do with our time, then.&quot;&lt;/em&gt;

What's the best way of doing this up-front estimation? There's certainly lots of approaches out there. Personally, I've settled on the following method:
&lt;ol&gt;
	&lt;li&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Start by getting your bearings somewhat. &lt;/span&gt;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;This means doing &lt;strong&gt;enough&lt;/strong&gt; design and requirement gathering up front. Talk to stakeholders and users. Play around with any new unfamiliar technology that the work will require. &lt;/span&gt;  

&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Extract the concrete tasks that must be done. Each task should take less than eight &lt;strong&gt;ideal&lt;/strong&gt; hours to complete &lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (see below)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;. Tasks larger than this are often opaque &quot;lumps&quot; of many tasks, which are harder to estimate accurately- so divide the work into subtasks as needed. Don't forget work related to polish and testing: integration testing, documentation, release routines, etc.&lt;/span&gt;  

&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Estimate each task in &lt;strong&gt;ideal&lt;/strong&gt; hours: &quot;how many hours would this take if I could focus 100%, no interruptions, closed office?&quot; Another approach is to estimate using abstract or relative units, before translating to actual ideal hours. &lt;a title=&quot;Poke Planning Game description&quot; href=&quot;http://www.codinghorror.com/blog/archives/000981.html&quot;&gt;The Poker Planning Game&lt;/a&gt; and the &lt;a title=&quot;Pomodoro Technique website&quot; href=&quot;http://www.pomodorotechnique.com/&quot;&gt;Pomodoro Technique&lt;/a&gt; are good examples of this approach.&lt;/span&gt;  

&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Add up total ideal hours. Then multiply by a &lt;strong&gt;risk factor&lt;/strong&gt;, to allow for &lt;a title=&quot;Murphy's Law wikipedia entry&quot; href=&quot;http://en.wikipedia.org/wiki/Murphy%27s_law&quot;&gt;Murphy's Law&lt;/a&gt;. My personal minimum is usually 1.2 (20%) - and that's if I have a very good handle on both the technology, the requirements and most other significant factors.&lt;/span&gt;  

&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Figure out how many &lt;strong&gt;ideal&lt;/strong&gt; hours you actually get done each week. How much effective time do you really have left when you subtract meetings, interruptions, lunch, motivation lapses, etc etc? Divide the hour number from step 4 by these actual hours accomplished each week. Now you know roughly how many &lt;strong&gt;actual&lt;/strong&gt; hours the work will take.&lt;/span&gt;  

&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;comment&quot;&gt;&lt;span style=&quot;color: #000000;&quot;&gt;Finally, take &lt;strong&gt;external dependencies&lt;/strong&gt; into consideration. Will Joe Developer be there week one or is he tied up? Will Sue Tester go for a three week holiday to Hawaii at some point? Set up the project schedule based on these known constraints.&lt;/span&gt;  

&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;span class=&quot;comment&quot;&gt;This method is heavily inspired by &lt;span class=&quot;comment&quot;&gt;Mike Cohn's&lt;/span&gt; &lt;a title=&quot;Amazon book link&quot; href=&quot;http://www.amazon.com/Agile-Estimating-Planning-Robert-Martin/dp/0131479415&quot;&gt;Agile Estimating and Planning&lt;/a&gt;, and I use it both at my dayjob and for private side projects. I've found this to yield quite &lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;accurate estimates for small projects - eg. where the scope is less than, say, 3 months with less than four developers.
&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;For larger projects you may find that estimating work up in such fine grained tasks involves a lot of uncertainty. &quot;How can I know exactly what specific tasks will be required all through my project?&quot;. Well, yes - for projects with larger scopes, this quickly turns into riskful guesswork.  This is what makes estimating entire large projects up front (and, by extension, taking on large fixed cost projects) such a &lt;a title=&quot;Dr Dobbs article on fixed cost projects (Scott Ambler)&quot; href=&quot;http://www.ddj.com/209101238&quot;&gt;dicey proposition&lt;/a&gt;.
&lt;/span&gt;</column>
            <column name="post_title">Painless Estimates</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">painless-estimates</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2009-04-14 15:22:40</column>
            <column name="post_modified_gmt">2009-04-14 14:22:40</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=916</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">3</column>
        </table>
        <table name="wp_posts">
            <column name="ID">997</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-06-30 16:16:00</column>
            <column name="post_date_gmt">2009-06-30 15:16:00</column>
            <column name="post_content">&lt;em&gt;Three months ago I stumbled across a time management system called 'The Pomodoro Technique'. I really liked it due to the immediate productivity gains it gave me. I thought I'd follow that blog post up with my current impression of the technique, now that I've used it for a while. Todays blog entry will make more sense if you read my &lt;a title=&quot;Original pomodoro blog post link&quot; href=&quot;http://messynotebook.com/?p=833&quot;&gt;the original post&lt;/a&gt; first.
&lt;/em&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;em&gt;&lt;a title=&quot;Pomodoro Technique website&quot; href=&quot;http://www.pomodorotechnique.com/&quot; target=&quot;_blank&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-838&quot; title=&quot;pomodoroTechniqueLogo&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/03/pomodorologo.jpg&quot; alt=&quot;pomodoroTechniqueLogo&quot; width=&quot;284&quot; height=&quot;178&quot; /&gt;&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;

&lt;strong&gt;Recap&lt;/strong&gt;

The idea of the Pomodoro Technique is that you work in timeboxed intervals of 25 minutes. Each interval is called a &quot;Pomodoro&quot; (tomato). Once you've completed a pomodoro you make a note of it, and take a five minute break. After four pomodoros you take a longer break.

&lt;strong&gt;The Good&lt;/strong&gt;

I'm ultra focused when I work on tasks using this system. I initially found the ticking egg timer somewhat distracting and stressful, but that passed after a week or two. Once I start the clock I'm usually able to enter a state of flow really quickly.

I've repeatedly seen clear benefits from the self-enforced breaks; they sometimes make me step back, rethink and adjust what I'm working on. This has prevented me from going too far down some potentially time-consuming dead ends.

Recording completed pomodoros forces me to document and take stock of how much time I spend on different tasks. This provides historical data which really helps &lt;a title=&quot;Estimation blog post&quot; href=&quot;http://messynotebook.com/?p=916&quot;&gt;when I estimate&lt;/a&gt; similar future tasks.

&lt;em&gt;&quot;I'm going to complete a few eggs, dear&quot;&lt;/em&gt; has become a catchphrase at home &lt;em&gt;(eggs = egg timers / pomodoros)&lt;/em&gt;. It's a clear way of communicating to my fiancè that I'm setting aside a concrete amount of time for work. This lets her know &lt;em&gt;exactly&lt;/em&gt;&lt;strong&gt; &lt;/strong&gt;when I'll emerge from &lt;a title=&quot;Rands in Repose article on &amp;quot;The Cave&amp;quot;&quot; href=&quot;http://www.randsinrepose.com/archives/2006/07/10/a_nerd_in_a_cave.html&quot;&gt;my cave&lt;/a&gt; again. :)

&lt;strong&gt;The Bad&lt;/strong&gt;

It's &lt;em&gt;hard&lt;/em&gt; to stop working once the egg timer rings. This is especially noticeable if I'm almost done with a task; it's very tempting to put a few more minutes in before I take that break. Of course, those &quot;few minutes&quot; sometimes end up taking an hour or two...

The technique forces me into a certain mindset. I become really focused and efficient, which is great for concrete, well planned tasks. It's not always suitable for more reflective and explorative work, though. I find I do better at things like research, brainstorming, design and general planning when I'm not under the gun of my egg timer.

I have not used the technique seriously at my dayjob yet. I'm not using a mechanical timer there, since a ringing egg timer would be quite distracting for my coworkers (several of us share an office). One solution: use headphones combined with a software-based timer instead. Unfortunately, I find tools like &lt;a title=&quot;mytomatoes.com link&quot; href=&quot;http://mytomatoes.com/&quot;&gt;mytomatoes.com&lt;/a&gt; much less effective than a mechanical clock; the &quot;break&quot; audio signal is far less noticable, and it's often lost on me because I take off my headphones or listen to music while working.

&lt;strong&gt;Conclusion&lt;/strong&gt;

The Pomodoro technique has boosted my productivity, and I highly encourage more software developers to try it out. I will keep using it for my side projects. It has been less useful at my dayjob, but I'm going to try to adapt it to work well there as well.</column>
            <column name="post_title">Pomodoro Technique Revisited</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">pomodoro-technique-revisited</column>
            <column name="to_ping"></column>
            <column name="pinged">http://messynotebook.com/?p=833
http://messynotebook.com/?p=916</column>
            <column name="post_modified">2009-07-06 14:08:03</column>
            <column name="post_modified_gmt">2009-07-06 13:08:03</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=997</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">7</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1083</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-05-29 16:40:51</column>
            <column name="post_date_gmt">2009-05-29 15:40:51</column>
            <column name="post_content">&lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;size-full wp-image-1098 aligncenter&quot; title=&quot;stackedRocks&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/05/stackedrocksshrunk.jpg&quot; alt=&quot;stackedRocks&quot; width=&quot;267&quot; height=&quot;400&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;/p&gt;

Starting a new pet project is easy. But finishing it? That's a different story.

Many programmers love to tinker with side projects. I'll argue that most of the decent ones do, anyway. Learning new tools makes us want to build things. Innovative technologies, cool product ideas. Unfortunately, the result is usually just a sad collection of forgotten files on some hard drive.

I'm certainly no exception to this - my portfolio isn't exactly jam packed with polished results. I've worked up enthusiasm for a variety of hobby projects over the years, with somewhat spotty follow-through.

Recently, however, I decided to step it up a notch. &quot;&lt;em&gt;This time I'm going to stick with it until I end up with a real product.&quot;&lt;/em&gt; &lt;strong&gt;So I did&lt;/strong&gt;. I bootstrapped &lt;a title=&quot;ThoughtMuse link&quot; href=&quot;http://thoughtmuse.com&quot;&gt;ThoughtMuse&lt;/a&gt;, an online mindmapping tool,  in under five months using only my spare time during nights and weekends.

To keep development of my product rolling I try to consistently apply basic productivity techniques. They're not particularly new and amazing methods - many of them are just Project Management 101. Unfortunately, they often seem to go straight out the window when programmers sit down to work on their own time. Perhaps using basic project management practices makes pet projects feel less sexy, somehow?

Anyway, these are some of my favourite techniques to keep producing in my spare time.

&lt;strong&gt;Set goals&lt;/strong&gt;

Stating exactly what you want to achieve motivates you and focuses your efforts. And no, saying that you &quot;kinda want to build this thingamajig&quot; won't cut it. Be specific. Quantify. &lt;em&gt;What am I creating? For whom? By when? What, and how much of it, do I need to achieve?&lt;/em&gt; Write down concrete, measurable objectives.

&lt;strong&gt;Divide into milestones&lt;/strong&gt;

If your project will take more than a few weeks it's crucial that you divide the work into separate deliverables. Always having a single enormous blob of work left is demotivating. Instead, structure your project as a collection of smaller increments. And reward yourself every time you complete one of them!

&lt;strong&gt;Make yourself accountable&lt;/strong&gt;

Tell someone what you are doing, and keep people informed of your progress. Talk to friends, post progress updates on your blog, whatever. The idea is to set up a small amount of external pressure to keep you going when the chips are down. &lt;em&gt;I told Bob that I'd finish this cool widget by March - so I'd better get cracking!&lt;/em&gt;

&lt;strong&gt;Something every day&lt;/strong&gt;

You need steady momentum to keep the project rolling. It's much harder to sit down and work if you only do so every other week - you then need to use more time and energy to &quot;spin back up&quot; every time. You also run a higher risk of falling off the wagon completely if you miss one or two  of those long sessions. Instead you want to ingrain a steady, regular habit which feels as natural as brushing your teeth every evening.

&lt;strong&gt;Don't force it&lt;/strong&gt;

Like woodworkers say: &lt;em&gt;don't work against the grain&lt;/em&gt;. If you hit a serious wall in some task, switch to something completely different to keep your momentum going. There's always other stuff that also needs to be worked on. Some code proving hard to debug? Jump to, say, user interface design instead. Then come back to the original problem later on. Problems have a way of solving themselves if you let your subconcious chew on it for a while.

&lt;strong&gt;Iterate, iterate, iterate
&lt;/strong&gt;

You won't get every task right the first time. Allow yourself to come back to each area of your product multiple times with fresh eyes. You'll see more clearly the second and third time you return to that piece of code or functionality.

&lt;strong&gt;Sustainable pace&lt;/strong&gt;

Slow and steady will get you there in the end, full sprint might not. I think that taking the tortoise route is the safest approach. Avoid burning yourself out by overworking. This is especially important in the beginning when you have lots of enthusiasm. You will feel less optimistic in a few weeks or months, it's just a matter of time - so pace yourself.

&lt;strong&gt;Timebox everything&lt;/strong&gt;

Perform an initial rough &lt;a title=&quot;Estimation blog post&quot; href=&quot;http://messynotebook.com/?p=916&quot;&gt;estimate&lt;/a&gt; of how much time and effort the project will take, given how ambitious it is. Then set aside fixed amounts of time you are willing to spend on your project. &lt;em&gt;&quot;I have to be done in three months, using no more than ten hours a week&quot;&lt;/em&gt;. Work on each specific task for &lt;a title=&quot;Blog post on Pomodoro time management&quot; href=&quot;http://messynotebook.com/?p=833&quot;&gt;set amounts of time&lt;/a&gt;.  This maximizes your focus. Timeboxing is especially useful if you're in a relationship; your girlfriend/boyfriend/wife/husband/children will thank you for this one.

&lt;strong&gt;Ruthlessly trim scope&lt;/strong&gt;

This is the flip side of the technique above. You now have strictly limited time to burn on the project, so get the most out of your available hours. We have a tendency to get carried away, dream up new features and let the scope of our projects grow. Try to constantly remove instead&lt;em&gt;. &lt;/em&gt;Paraphrasing Einstein: &lt;em&gt;&quot;Everything should be made as simple as possible, but not simpler.&quot;&lt;/em&gt; Do you really need this, that or the other to be satisfied with the finished product? If not, just archive the idea, then move along.

&lt;strong&gt;Let life intrude&lt;/strong&gt;

Accept that Everyday Life can and will mess up your schedule sometimes. That's ok. Don't stress out about it - as long as you're moving forward you'll get there eventually. Just keep plugging away. Stick with it!
&lt;p style=&quot;text-align: center;&quot;&gt;&lt;img class=&quot;size-full wp-image-1125 aligncenter&quot; title=&quot;stonePath&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2009/05/stonepath.jpg&quot; alt=&quot;stonePath&quot; width=&quot;234&quot; height=&quot;350&quot; /&gt;&lt;/p&gt;

I've described the techniques above in the context of software development, but they should be fairly universal and applicable for anyone practicing some sort of craft in their spare time. If you have any other methods which work well for you, I'd love to hear about them!

Are there areas in which any of these techniques don't work or are actually harmful? I don't know - feel free to tell me if you know of specific counter-examples.

Now, time to get back to work on that cool new feature...</column>
            <column name="post_title">How To Build Something Real (In Your Spare Time)</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">how-to-build-something-real-in-your-spare-time</column>
            <column name="to_ping"></column>
            <column name="pinged">http://messynotebook.com/?p=833
http://messynotebook.com/?p=916</column>
            <column name="post_modified">2009-08-03 19:10:54</column>
            <column name="post_modified_gmt">2009-08-03 18:10:54</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1083</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">37</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1443</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-05-10 22:28:03</column>
            <column name="post_date_gmt">2010-05-10 21:28:03</column>
            <column name="post_content">I'm starting to fall in love with &lt;a href=&quot;http://clojure.org&quot;&gt;Clojure&lt;/a&gt;, and I'm having lots of fun learning the basics of it. The best way to get up to speed in new programming language is to write something useful, so that's what I'm currently doing.

My first crack at a Clojure program is a simple auto-testing tool. I like test-driven development, and I wanted a light-weight way of running my clojure unit tests continuously in the background. If I break a test, I want to find out at once. When I fix the error I want a confirmation of that as well.

An autotest workflow is extra useful when learning a new language - in that situation you should take extra small steps, with very rapid feedback cycles guiding your way.

&lt;em&gt;This is what it looks like:&lt;/em&gt;

&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;640&quot; height=&quot;480&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=11633909&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;480&quot; src=&quot;http://vimeo.com/moogaloop.swf?clip_id=11633909&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

Keep in mind that this works best with lean, rapid unit tests (measured in seconds, not minutes). Massive fifteen-minute test-suites defeats the purpose of autotesting.

The algorithm is trivial: a one-second-interval loop that scans for changes to source files in the project directory. If file timestamps change or new files are added, a test run is triggered. The result of the test is determined by scraping the output of the terminal. The terminal is then colored green for test success or red if anything fails (I use tiny &lt;a href=&quot;http://developer.apple.com/Mac/library/documentation/Darwin/Reference/ManPages/man1/osascript.1.html&quot;&gt;osascripts&lt;/a&gt; to color the terminal in different colors).

&lt;em&gt;Source code:&lt;/em&gt;

&lt;code&gt;
&lt;pre lang=&quot;clojure&quot;&gt;(ns com.thomanil.autotest
  (:require clojure.contrib.shell-out))

(use 'clojure.contrib.shell-out)

(defn cmd-line [command] (sh &quot;bash&quot; :in command))
(defn clear-console [] (println (cmd-line &quot;clear&quot;)))
(defn visually-indicate-test-running [] (cmd-line &quot;osascript bin/testrunner/make-term-yellow&quot;))
(defn visually-indicate-success [] (cmd-line &quot;osascript bin/testrunner/make-term-green&quot;))
(defn visually-indicate-failure [] (cmd-line &quot;osascript bin/testrunner/make-term-red&quot;))
(defn visually-indicate-exception [] (cmd-line &quot;osascript bin/testrunner/make-term-red&quot;))
(defn all-source-files [] (seq (.split (cmd-line &quot;ls **/*.clj&quot;) &quot;\n&quot;)))
(defn all-test-files [] (seq (.split (cmd-line &quot;ls test/*.clj&quot;) &quot;\n&quot;)))
(defn file-state [file-path] (cmd-line (str &quot;ls -l -T &quot; file-path)))
(defn state-of-src-files [] (map #(file-state %) (all-source-files)))

(def run-cmd &quot;java -Xmx1G -cp lib/clojure.jar:lib/clojure-contrib.jar:.:classes clojure.lang.Script &quot;)
(defn run-tests [] (cmd-line (str run-cmd (apply str (interpose &quot; &quot; (all-test-files))))))

(defn set-console-state [test-result]
	(let [test-status (get test-result 0) test-output (get test-result 1)]
		(when (= test-status :success)
			(println test-output)
			(println &quot;ALL TESTS SUCCEED&quot;)
			(visually-indicate-success))
		(when (= test-status :failure)
  			(println test-output)
  			(println &quot;SOME TEST(S) FAILED&quot;)
  			(visually-indicate-failure))
		(when (= test-status :exception)
			(println test-output)
			(println &quot;EXCEPTIONS OCCURRED&quot;)
      		(visually-indicate-exception))))

(defn exception-or-failure-in-text [result]
	(cond
		(.contains result &quot;Exception in&quot;) :exception
		(.contains result &quot;FAIL in&quot;) :failure
	 	(.contains result &quot;0 failures, 0 errors&quot;) :success ))

(defn determine-test-status []
	(clear-console)
	(let [result (run-tests)]
		(let [state (exception-or-failure-in-text result)] [state, result] )))

(defn run-test []
	(visually-indicate-test-running)
	(set-console-state (determine-test-status)))

(def monitored-files (ref (state-of-src-files)))

(defn files-changed? []
	(let [current-state (apply str (state-of-src-files))
		  last-state (apply str @monitored-files)]
			(if (not(= current-state last-state))
				(do (dosync
					(ref-set monitored-files (state-of-src-files)))
					:true)
				nil)))

(defn test-loop []
	(loop []
		(if (files-changed?) (run-test))
		(Thread/sleep 1000)
		(recur)))

(run-test)  ;Do first test no matter what
(test-loop) ;Wait for changes in files to trigger new tests&lt;/pre&gt;
&lt;/code&gt;

&lt;em&gt;Disclaimer: Some of the above is probably not idiomatic Clojure code, since I'm still very much a novice in this language.&lt;/em&gt;</column>
            <column name="post_title">Writing an Auto-Test Tool in Clojure</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">writing-an-auto-test-tool-in-clojure</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2010-05-11 20:22:44</column>
            <column name="post_modified_gmt">2010-05-11 19:22:44</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1443</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1269</column>
            <column name="post_author">1</column>
            <column name="post_date">2009-08-02 11:48:02</column>
            <column name="post_date_gmt">2009-08-02 10:48:02</column>
            <column name="post_content">For the past couple of months I've worked on a nontrivial project:&lt;strong&gt; build, launch and sell a commercial product on my own.&lt;/strong&gt;

I set fairly strict constraints for the project:
&lt;ul&gt;
	&lt;li&gt;Use less than five months to release the first version.&lt;/li&gt;
	&lt;li&gt;Work on it no more than fifteen hours a week (nights and weekends).&lt;/li&gt;
	&lt;li&gt;Don't neglect my family, which I love.&lt;/li&gt;
	&lt;li&gt;Keep my dayjob, which I really enjoy.&lt;/li&gt;
&lt;/ul&gt;
Well, I did it. The result is &lt;a title=&quot;ThoughtMuse link&quot; href=&quot;http://thoughtmuse.com&quot;&gt;ThoughtMuse&lt;/a&gt;, an online mindmapping tool which runs in your browser. I released v.1.0 a week ago.

&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;425&quot; height=&quot;344&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://www.youtube.com/v/FzEw7c92ooQ&amp;amp;hl=en&amp;amp;fs=1&amp;amp;rel=0&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;344&quot; src=&quot;http://www.youtube.com/v/FzEw7c92ooQ&amp;amp;hl=en&amp;amp;fs=1&amp;amp;rel=0&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

It's early days.  ThoughtMuse has some rough edges which I need to improve, and there's plenty of additional features I'd like to add to it.

So do I have any paying customers yet? Well, the magical first sale ticked in a few days after launch; the sweetest $35.40 I've ever earned. Building and selling something on your own is extremely rewarding. Making a profit? Sure, that would be nice as well. :)

You learn&lt;strong&gt; a lot&lt;/strong&gt; by building a commercial product all on your own. I'm going to write more on this later on.
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;My First Product Has Gone Live!&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;For the past months I've tinkered with a non-trivial personal project: build, launch and sell a commercial product on my own. I've set fairly strict constraints for the project:&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;Take less than six months.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;Use less than fifteen hours a week.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;Don't neglect my family, which I love.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;Keep my dayjob, which I also love.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;Well, I did it. The product is ThoughtMuse, an online mindmapping tool. I released v.1.0 a week ago.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;THOUGHTMUSE LOGO (CLICKABLE), MOVIE?&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;It's very early days.  I took Eric Ries advice (LINK) and went for a lean approach. &quot;Release the minimally viable product as early as possible, then iterate based on user feedback&quot;. The product has rough edges, and there's a ton of features I'd like to add.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;The magical first sale ticked in a few days after launch. The sweetest $ 35.40 I've ever earned, and one of the most rewarding moments I've had as a software developer. Building and selling something all on your own is extremely rewarding in itself. Making a profit? Yes, that would be nice as well. :)&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;You learn *a lot* by building a commercial product all on your own. I'm going to write more on this later on.&lt;/div&gt;
&lt;div id=&quot;_mcePaste&quot; style=&quot;overflow: hidden; position: absolute; left: -10000px; top: 0px; width: 1px; height: 1px;&quot;&gt;Try ThoughtMuse out yourself (interactive demo, no registration required). Tell me what you think of it! Are you encountering bugs? What parts of the user interface annoys you? What do you feel is missing? I appreciate all the feedback I can get; it really helps me decide what to improve first&lt;/div&gt;</column>
            <column name="post_title">Released My First Real Product!</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">released-my-first-real-product</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2009-08-20 12:10:57</column>
            <column name="post_modified_gmt">2009-08-20 11:10:57</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1269</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">6</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1362</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-03-12 23:08:09</column>
            <column name="post_date_gmt">2010-03-12 22:08:09</column>
            <column name="post_content">I've created a free, downloadable workshop for you. It introduces you to the skills, tools and techniques of modern JavaScript development.

The workshop takes roughly half a day (3-4 hrs) when presented properly, with equal parts presentation and practical exercises. You can use the slides and exercises as a personal study aid, or you can arrange a proper workshop for your own colleagues or clients. Alternatively,&lt;a title=&quot;Contact Info&quot; href=&quot;http://kjeldahlnilsson.net/contact.php&quot;&gt; contact me&lt;/a&gt;. I'm able to hold the workshop on-site in and around Oslo.

&lt;strong&gt;&lt;a title=&quot;Download link&quot; href=&quot;http://kjeldahlnilsson.net/jsnh.zip&quot;&gt;DOWNLOAD&lt;/a&gt;&lt;/strong&gt;&lt;strong&gt;&lt;a title=&quot;Download link&quot; href=&quot;http://kjeldahlnilsson.net/jsnh.zip&quot;&gt; HERE&lt;/a&gt; &lt;em&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;(slides, lecture notes, exercises, solutions, examples, tools)&lt;/span&gt;&lt;/em&gt;&lt;/strong&gt;

&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;425&quot; height=&quot;355&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowFullScreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowScriptAccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=slides-100310162930-phpapp02&amp;amp;rel=0&amp;amp;stripped_title=javascript-neednt-hurt-3390657&quot; /&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;425&quot; height=&quot;355&quot; src=&quot;http://static.slidesharecdn.com/swf/ssplayer2.swf?doc=slides-100310162930-phpapp02&amp;amp;rel=0&amp;amp;stripped_title=javascript-neednt-hurt-3390657&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;
&lt;div id=&quot;__ss_3390657&quot; style=&quot;width: 425px;&quot;&gt;
&lt;div style=&quot;padding: 5px 0 12px;&quot;&gt;&lt;em&gt;This work is licensed under Creative Commons Attribution 3.0 License. You're free to use it, change it and share it freely, as long as my name stays in the credits. &lt;/em&gt;&lt;/div&gt;
&lt;/div&gt;</column>
            <column name="post_title">&quot;JavaScript Needn't Hurt!&quot; : A JavaScript Primer</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">javascript-neednt-hurt-crash-course-in-modern-javascript-development</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2010-05-07 08:22:05</column>
            <column name="post_modified_gmt">2010-05-07 07:22:05</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1362</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">1</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1325</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-02-15 01:58:55</column>
            <column name="post_date_gmt">2010-02-15 00:58:55</column>
            <column name="post_content">&lt;strong&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;A &lt;/span&gt;code kata&lt;span style=&quot;font-weight: normal;&quot;&gt; is a short programming task. &lt;/span&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;Its purpose is to let you practice tools and technique. You pick a relatively small problem and practice it repeatedly. Since the task is small, you free yourself to focus on technique and speed, tools and workflows, as opposed to active problem solving.&lt;/span&gt;&lt;/strong&gt;

I was inspired by the &quot;katacasts&quot; of &lt;a href=&quot;http://katas.softwarecraftsmanship.org/?p=71&quot;&gt;Uncle Bob&lt;/a&gt; as well as my friend &lt;a href=&quot;http://johannesbrodwall.com/2009/12/31/my-first-katacast/&quot;&gt;Johannes&lt;/a&gt;, and decided to do one of my own. I chose a very simple task for this clip: the &lt;a href=&quot;http://www.codinghorror.com/blog/2007/02/why-cant-programmers-program.html&quot;&gt;FizzBuzz interview question&lt;/a&gt;.

&lt;strong&gt;Print digits from 0 to 100. For every digit which divides with three, print &quot;fizz&quot; instead. For digits dividing with five, print &quot;buzz&quot;. For digits which divide with both, print &quot;fizzbuzz&quot;.&lt;/strong&gt;

My solution, as shown in the video below, was meant to accomplish two things:

&lt;strong&gt; Demonstrate simple TDD workflow in JavaScript.&lt;/strong&gt; Many software developers tend to treat JavaScript as the redheaded stepchild of programming languages. We unit test our &quot;real&quot; code (Java, C#, Ruby, whatever), but for some reason, that tends to go out the window when we switch to JavaScript. This is a shame; automated regression testing becomes extremely useful once your JavaScript code grows into hundreds or thousands LOC.

&lt;strong&gt; Improve my technique and speed&lt;/strong&gt; in my editor of choice - &lt;a href=&quot;http://macromates.com/&quot;&gt;TextMate&lt;/a&gt;. I'm trying to use the mouse as little as possible, can you tell? I still consider myself fairly slow in TextMate, but I improved while practicing for this screencast.

&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;400&quot; height=&quot;300&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=9453172&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;640&quot; height=&quot;424&quot; src=&quot;http://vimeo.com/moogaloop.swf?clip_id=9453172&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=0&amp;amp;color=&amp;amp;fullscreen=1&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;strong&gt; Note:&lt;/strong&gt; I generate a tiny development environment in the beginning of the clip. This setup is something I've put together for a JavaScript course I'm holding internally at my workplace. The environment is meant to get you started quickly with good practices and useful tools (like &lt;a href=&quot;http://developer.yahoo.com/yui/yuitest/&quot;&gt;YUI Test&lt;/a&gt;, &lt;a href=&quot;http://www.jslint.com/&quot;&gt;jsLint&lt;/a&gt;, &lt;a href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;). I'll probably turn it into a tiny open source project once it's somewhat more stable. Feel free to tweet me if you want a look at it.

&lt;em&gt; The clip was shot using SnapzProX on OS X 10.6.2. I edited the clip with Final Cut Express. No changes were made to the kata footage itself - I only added music and intro/outro screens.&lt;/em&gt;</column>
            <column name="post_title">FizzBuzz: A JavaScript Code Kata, TDD Style (Video) </column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">fizzbuzz-a-javascript-code-kata-tdd-style-video</column>
            <column name="to_ping"></column>
            <column name="pinged">http://katas.softwarecraftsmanship.org/?p=71
http://johannesbrodwall.com/2009/12/31/my-first-katacast/</column>
            <column name="post_modified">2010-02-15 16:27:40</column>
            <column name="post_modified_gmt">2010-02-15 15:27:40</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1325</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1407</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-04-16 14:57:53</column>
            <column name="post_date_gmt">2010-04-16 13:57:53</column>
            <column name="post_content">I'm not a great teacher. I don't have any special instructor credentials. I have, however, attended some bad technical presentations in the past, so I know of some common problems. Fortunately they're not too hard to fix.

I recently held a &lt;a title=&quot;JavaScript Workshop&quot; href=&quot;http://messynotebook.com/?p=1362&quot;&gt;programming course&lt;/a&gt; of my own. Resolved to avoid as many pitfalls as possible, I invested some time to properly market, prepare and present my class. These are some principles and techniques which seem to work well.

&lt;strong&gt;MARKETING&lt;/strong&gt;

Start with basic &lt;strong&gt;market research&lt;/strong&gt;. Consider your intended audience - what are they likely to want from the workshop?

Write a carefully worded invitation to the course. Create a proper pitch - sell it well! Standard principles of &lt;a title=&quot;22 Immutable Laws of Marketing book link&quot; href=&quot;http://www.amazon.com/22-Immutable-Laws-Marketing/dp/1861976100/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1271401727&amp;amp;sr=8-1&quot;&gt;marketing&lt;/a&gt; and &lt;a title=&quot;Copywriting amazon book link&quot; href=&quot;http://www.amazon.com/Copywriters-Handbook-Third-Step-Step/dp/0805078045/ref=sr_1_3?ie=UTF8&amp;amp;s=books&amp;amp;qid=1271401787&amp;amp;sr=1-3&quot;&gt;copywriting&lt;/a&gt; apply: state why the reader should care (the benefits) before listing concrete curriculum and details (the &quot;features&quot;).

Announce the workshop in a wide range of channels: face-to-face, email, social media... the more the better.

&lt;a href=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/04/iStock_000011938756Small.jpg&quot;&gt;&lt;img class=&quot;size-medium wp-image-1418 alignleft&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; title=&quot;megaphone&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/04/iStock_000011938756Small-300x199.jpg&quot; alt=&quot;Image: Get the word out!&quot; width=&quot;300&quot; height=&quot;199&quot; /&gt;&lt;/a&gt;

Make sure it's &lt;strong&gt;easy to sign up&lt;/strong&gt;. Think of it like converting prospects to customers - make the &quot;buy&quot; threshold really low for potential pupils.

Once signed up, contact participants individually well before the workshop. Send reminders and practical info. Also, try to gauge their experience level and interest in the subject of the class. This lets you tailor your material to the audience beforehand.

&lt;strong&gt;PLANNING &amp;amp; STRUCTURE&lt;/strong&gt;

Again, think about your target audience - after the steps above you should have a better idea who will show up. Generalize this into &lt;a title=&quot;Blog post on persona technique&quot; href=&quot;http://www.stevebromley.com/blog/tag/persona/&quot;&gt;personae&lt;/a&gt; - which &lt;strong&gt;archetypes&lt;/strong&gt; of people should you prepare for? Can you tweak the workshop to offer something to both &lt;em&gt;Pro Programmer Penny&lt;/em&gt; and &lt;em&gt;Middle Manager Mike&lt;/em&gt;, if both kinds of people have signed up?

Think through the overall structure and syllabus of the workshop thoroughly. Use flexible techniques like &lt;strong&gt;whiteboarding, sketching and &lt;/strong&gt;&lt;a title=&quot;Mindmaps on wikipedia&quot; href=&quot;http://en.wikipedia.org/wiki/Mind_map&quot;&gt;mind maps&lt;/a&gt; to brainstorm scope and content. Like software development, missteps are much cheaper to fix in the initial planning stage.

&lt;a style=&quot;text-decoration: none;&quot; href=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/04/iStock_000005562005Small.jpg&quot;&gt;&lt;img class=&quot;size-medium wp-image-1419 alignright&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; title=&quot;stacking black and white stones&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/04/iStock_000005562005Small-300x199.jpg&quot; alt=&quot;Stacking stones&quot; width=&quot;300&quot; height=&quot;199&quot; /&gt;&lt;/a&gt;

&lt;strong&gt;How will you teach?&lt;/strong&gt; A range of methods works best, if you have time for it. Some lecturing, some &quot;show and tell&quot;, some &quot;try yourself&quot;. Each individual attending has her own way of learning - try to present the material in several ways to cater to everyone. Don't worry if this duplicates a lot of material; repetition aids memory retention!

Present both core facts and related context.  In other words, present both &quot;what it is&quot; and &quot;why you should care&quot;. Micro and macro.

Your audience will have varying levels of expertise and aptitude in the material you are teaching. Try to cater to both the experienced student as well as the total novice, if both are likely to attend.

I like to start workshops with a lecture to lay some foundation, with plenty of live demos and moving examples along the way. Then I move on to practical exercises. In short: &lt;strong&gt;talk about it, show it, let people try it&lt;/strong&gt;. Note: the rest of the article assumes this workshop format.

&lt;strong&gt;THE SLIDES&lt;/strong&gt;

Start strong. Present a clear agenda - &quot;what are we going to learn today?&quot;. Keep your personal introduction brief; people care about what you intend to teach them, not your credentials.

Avoid long rambling slides. &lt;strong&gt;Short slides&lt;/strong&gt; are good, one-word slides better, a simple picture is best. Many succinct slides are better than few, text-heavy slides. Make. As. Short. Points. As. Possible.  Each slide then serves as a very precise prompt for you, making you less likely to ramble and forget your next point.

Your slides don't need to be works of art, but do use some &lt;strong&gt;basic techniques of graphic design&lt;/strong&gt;:
&lt;ul&gt;
	&lt;li&gt;Decide on overall style beforehand in order to make the slides as consistent as possible.&lt;/li&gt;
	&lt;li&gt;Use large fonts with high contrast colors. How will your code, text and video look when projected on a canvas? In normal daylight? From thirty feet away?&lt;/li&gt;
	&lt;li&gt;Use repetition. Content which repeats sticks in your mind after a while.&lt;/li&gt;
	&lt;li&gt;Use contrast. Content which stands out is memorable.&lt;/li&gt;
	&lt;li&gt;Employ evocative, &lt;a title=&quot;iStockphoto link&quot; href=&quot;http://www.istockphoto.com/&quot;&gt;high quality images&lt;/a&gt;.  Avoid bland clip-art.&lt;/li&gt;
	&lt;li&gt;Write short, to-the-point text with plenty of whitespace around it.&lt;/li&gt;
	&lt;li&gt;Drop the standard company-branded powerpoint template. I'm sure your official company stationary is nice, but it simply adds clutter beyond the first slide. Limit your marketing and branding to the introduction and conclusion.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;THE EXERCISES&lt;/strong&gt;

Prepare to spend a lot of time creating good &lt;strong&gt;practical exercises&lt;/strong&gt;! Some factors to consider:
&lt;ul&gt;
	&lt;li&gt;Assignments should start nice and easy to give a sense of accomplishment. &lt;strong&gt;Make the pupil feel awesome&lt;/strong&gt;!&lt;/li&gt;
	&lt;li&gt;Each exercise should be focused on teaching a single thing, and it should be obvious what the student is learning. &quot;Why it this awesome?&quot;&lt;/li&gt;
	&lt;li&gt;Create a wide range of exercises, make them possible to solve in any order. A long chain of cumulative exercises is vulnerable to &quot;blocking&quot;. Instead, make it possible to jump to something different if the pupil gets stuck.&lt;/li&gt;
	&lt;li&gt;Provide for a wide range of expertise in audience. Cater to both the star pupils and the less experienced. One way of doing this is to add &quot;extra credit&quot; parts to every exercise.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;Demand little to no preparation&lt;/strong&gt; from students before the workshop begins. Instead, make it really easy to get started during the actual session. Think &lt;a title=&quot;Design of Everyday Things amazon book link&quot; href=&quot;http://www.amazon.com/Design-Everyday-Things-Donald-Norman/dp/0465067107/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1271402199&amp;amp;sr=1-1&quot;&gt;user experience&lt;/a&gt;!&lt;/li&gt;
	&lt;li&gt;Don't assume reliable internet or intranet access during the workshop. Instead, provide tools, documentation and cheat sheets in the exercise handout.&lt;/li&gt;
	&lt;li&gt;Make sure it's easy to distribute the files and tools to the students. Buy a bunch of usb sticks, preload them with the handouts before the workshop begins.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;ITERATE &amp;amp; PRACTICE&lt;/strong&gt;

Once you have the basic structure and content in place, set aside plenty of time &lt;strong&gt;practice, tweak, practice, tweak&lt;/strong&gt;. Iterate and internalize the material. Like any other writing process, your material improves as you return to it repeatedly with fresh eyes. Make sure to leave time for the material to &quot;breathe a little&quot; in your mind before the big day arrives.

&lt;strong&gt;D-DAY&lt;/strong&gt;

Arrive early. Survey the room, set up your own laptop, make sure the light level is under control. You don't want to burn time hunting for light switches, cables and curtains once the workshop starts.

When people start arriving, greet as many as you can at the door. Get some smalltalk in before the actual workshop starts. You need to &lt;strong&gt;build rapport&lt;/strong&gt; with the audience as quickly as possibly in order to engage them, so reach out to them at once! Don't like public speaking? You'll find it much easier if you already have some friendly faces in the audience before your presentation begins.

Now for the hard part (at least for me): the lecture. Strive for a relaxed and clear presentation. Control your body language. Keep a steady, calm pace. Like a singer or a martial artist, use your stomach: &lt;strong&gt;breathe and speak from your gut&lt;/strong&gt;, don't squeak from your throat.

&lt;a href=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/04/iStock_000007979164Small.jpg&quot;&gt;&lt;img class=&quot;size-medium wp-image-1420 alignright&quot; style=&quot;margin-left: 20px; margin-right: 20px;&quot; title=&quot;conductor&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/04/iStock_000007979164Small-300x289.jpg&quot; alt=&quot;Conductors hands&quot; width=&quot;300&quot; height=&quot;289&quot; /&gt;&lt;/a&gt;

&lt;strong&gt;Engage your audience&lt;/strong&gt;. Ask both retorical and actual questions to the room. Have people answer with a show of hands, individual answers or group discussion. Participation is good!

Take short questions as you go, refer longer discussions to a QA session at the end - or possibly one-on-one email correspondence after the workshop ends.

Structure your talk in &lt;strong&gt;short sessions with plenty of breaks&lt;/strong&gt;, say 30-45 minutes with 5 minute breaks in between. Make the sessions even shorter if the venue is small and cramped - the crowd will quickly use up the fresh air.

Pay attention to your audience. If the seem bored, speed up. If they seem to &quot;fall off&quot;, slow down.

Hand out slides and exercises &lt;strong&gt;after&lt;/strong&gt; the lecture - not before. With a bunch of laptops and cellphones in the room, you're already fighting for the attention of your audience, so don't undercut yourself further by giving them something to read while you're talking. Control the message. You want their focus on you and the big screen.

During the practical exercises, actively circulate, talk to students, gauge their progress. &lt;strong&gt;Offer to help&lt;/strong&gt;. It's easy to ask questions to an instructor who is present and attentive. A teacher sitting behind a desk fifteen feet away? Not so much.

Finally, solicit&lt;strong&gt; feedback&lt;/strong&gt; from the audience at the end of the workshop. What worked well? Which parts of the workshop felt weak? Why?

Take their feedback to heart, and &lt;strong&gt;give an even more kickass workshop the next time&lt;/strong&gt;! :)

&lt;strong&gt;REFERENCES&lt;/strong&gt;

&lt;a href=&quot;http://www.amazon.com/Presentation-Zen-Simple-Design-Delivery/dp/0321525655/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1271425907&amp;amp;sr=1-1&quot;&gt;Presentation Zen&lt;/a&gt; (Amazon)

&lt;a href=&quot;http://www.amazon.com/Copywriters-Handbook-Third-Step-Step/dp/0805078045/ref=ntt_at_ep_dpi_1&quot;&gt;The Copywriter's Handbook&lt;/a&gt; (Amazon)

&lt;a href=&quot;http://headrush.typepad.com/&quot;&gt;Creating Passionate Users&lt;/a&gt;

&lt;a href=&quot;http://www.ted.com/&quot;&gt;TedTalks&lt;/a&gt;

&lt;a href=&quot;http://www.fourhourworkweek.com/blog/2010/04/11/public-speaking-how-i-prepare-every-time/&quot;&gt;Tim Ferris on public speaking&lt;/a&gt;

&lt;em&gt;Special thanks go out to &lt;a title=&quot;Siw Fjellkårstad Linkedin profile&quot; href=&quot;http://no.linkedin.com/in/sivfjellkarstad&quot;&gt;Siv Fjellkårstad&lt;/a&gt;,&lt;/em&gt;&lt;em&gt; &lt;a title=&quot;Johannes Brodwalls blog&quot; href=&quot;http://johannesbrodwall.com/&quot;&gt;Johannes Brodwall&lt;/a&gt;, and &lt;a href=&quot;http://no.linkedin.com/pub/markus-krüger/2/b2/892&quot;&gt;Markus Krüger&lt;/a&gt;&lt;/em&gt;&lt;em&gt; &lt;/em&gt;&lt;em&gt;for material and feedback for this article.&lt;/em&gt;
&lt;h2&gt;&lt;span style=&quot;font-size: small;&quot;&gt;&lt;span style=&quot;font-weight: normal;&quot;&gt;&lt;em&gt;&lt;span style=&quot;font-size: x-large;&quot;&gt;&lt;span style=&quot;font-style: normal;&quot;&gt;&lt;strong&gt;
&lt;/strong&gt;&lt;/span&gt;&lt;/span&gt;&lt;/em&gt;&lt;/span&gt;&lt;/span&gt;&lt;/h2&gt;</column>
            <column name="post_title">How to Create and Present a Kickass Technical Workshop</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">how-to-create-and-present-a-kickass-technical-workshop</column>
            <column name="to_ping"></column>
            <column name="pinged">http://messynotebook.com/?p=1362
http://www.fourhourworkweek.com/blog/2010/04/11/public-speaking-how-i-prepare-every-time/</column>
            <column name="post_modified">2010-04-30 18:36:05</column>
            <column name="post_modified_gmt">2010-04-30 17:36:05</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1407</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1477</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-06-24 20:46:34</column>
            <column name="post_date_gmt">2010-06-24 19:46:34</column>
            <column name="post_content">I used to &lt;strong&gt;hate&lt;/strong&gt; public speaking. Sweaty palms, stomach aches... the works. However, over the last year or so I finally got over it. Speaking to a big room of people simply doesn't bother me anymore.

It somehow happened over a relatively short period of time. I talked this over with a friend recently: &quot;&lt;em&gt;what changed?&quot;&lt;/em&gt; I think the following three points did the trick for me:

&lt;strong&gt;Know your material inside out.&lt;/strong&gt; Throw away your index cards, force yourself to really internalize your material before presenting it. Mastery breeds confidence.

&lt;strong&gt;P&lt;/strong&gt;&lt;strong&gt;ractice practice practice.&lt;/strong&gt; Every time you speak you'll improve, and you'll get a little more comfortable each time. Super obvious point, but speaking regularly does diminish the fear of it.

&lt;strong&gt;Set it in perspective. &lt;/strong&gt;I think this was key for me. I've had several scares at the hospital during the last year (unfounded ones, fortunately!) Now I use that experience to ground myself before speaking. Compared to the loss of a loved one, how scary is it really to get up in front of a crowd of peers? &lt;em&gt;&quot;Remember that hospital waiting room? This is peanuts in comparison! Sack up, dude!&quot;&lt;/em&gt;

Perhaps some of these measures will work for you as well?</column>
            <column name="post_title">Fearless Public Speaking</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">fearless-public-speaking</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2010-06-25 08:05:05</column>
            <column name="post_modified_gmt">2010-06-25 07:05:05</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1477</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1496</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-09-13 19:12:42</column>
            <column name="post_date_gmt">2010-09-13 18:12:42</column>
            <column name="post_content">&lt;em&gt;This is the blog post version of a talk I gave at the JavaZone 2010 conference.&lt;/em&gt;

I've had dynamic programming languages (JavaScript, Ruby, Lisp) on the brain lately. A common trait of these languages is the ability to program interactively.

The concept is simple, but I think it's easier to show rather than tell what interactive programming is. Here's an example, demonstrated in IRB (Interactive Ruby).

&lt;object classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; width=&quot;600&quot; height=&quot;400&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;src&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=14709877&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed type=&quot;application/x-shockwave-flash&quot; width=&quot;600&quot; height=&quot;400&quot; src=&quot;http://vimeo.com/moogaloop.swf?clip_id=14709877&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; allowscriptaccess=&quot;always&quot; allowfullscreen=&quot;true&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

What's happening here?

Well, I write very basic Ruby code. But watch what happens along the way. Every Ruby statement I write is evaluated and run by the environment. The result is printed back on the command line. The environment remembers my actions. I define variables and functions. I'm able to build new things on the fly, and I get instant feedback for everything I do. No recompilation or restart steps necessary.

Our usual process for software development is like a steel mill. We create a mold (write code in an IDE). Then we stamp out a chunk of steel (compile, deploy, restart). Does the steel chunk (software system) have the wrong shape? Back to the drawing board, then.

This feedback-loop is much shorter than before thanks to faster compilation, incremental compilation, faster computers and unit testing - but we still waste time running back and forth like this.

Interactive programming, on the other hand, is somewhat like working with clay; work on the actual artifact directly. Mold it, add some clay (code), keep working, see what happens. No feedback loop at all.

This isn't a replacement for our usual tools and workflow - it's a useful supplement. Yes, you'd better use steel to build a production car. But prototypes are easier to build in clay. Likewise, interactive programming is a useful utility for serious software development.

So interactive programming is useful because you work faster, due to a shorter feedback-loop. You're able to write less code, because you spend less time building infrastructure and boilerplate.

However, I suspect that the single Ruby example above didn't full drive home the point. Let's look at a few other scenarious, all of which I use regularly myself.

I sometimes use interactive programming as an &lt;strong&gt;systems interface&lt;/strong&gt; for running webapps. In the clip below I start up an interactive Rails console on a testserver. This gives me access to the same APIs and data as my server backend - interactively - &lt;em&gt;while the system is still running&lt;/em&gt;.

&lt;object width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=14709904&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=14709904&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

You can use Rails console as a replacement for a heavy web interface. Instead of building functionality you might not need, simply use the console. If you find yourself doing the same task repeatedly, &lt;strong&gt;then&lt;/strong&gt; consider building a web UI for that task.

The console is also useful for small experiments while developing the system - try ideas out before commiting to them with production code.

Now, let's move on to frontend work. The Firebug plugin provides another useful interactive environment. Watch:

&lt;object width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=14711715&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=14711715&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

This was a very simple example. I do however use the same techniques when I develop more complex UIs; the Firebug console is useful for testing stuff out &quot;live&quot;.

Unit testing is great for JavaScript development, but I often don't know exactly what I'm looking for, how I want the final result to look. The Firebug console lets me quickly, iteratively look for a solution.

With me so far? In that case I think I know what you're thinking. &lt;em&gt;&quot;I don't want to write code straight to the command line! I like my editor just fine!&quot;&lt;/em&gt; Well, you could write code in your IDE and then paste it into the interactive environment. However, it would be nice if the IDE let us send code straight to the console, right? Let's look at one way of doing this.

Clojure is a young but promising programming language. It's just a few years old, but it's built on mature technology. Clojure is a Lisp dialect. What we've called interactive consoles so far, Lispers often call REPL (Read Eval Print Loops), and Lisp has a much stronger tradition of using REPL tools.

Let's look at an example in Clojure. I stay in Emacs during the entire demonstration, marking and sending code to a separate REPL process. In this example I use this workflow to work effectively with 3d graphics (OpenGL is something I know very little about, so an interactive workflow is useful to ensure I get immediate feedback while testin things out).

The clip starts with a demonstration of the basic workflow, then some simple 3d graphics play, and finally I implement the rendering of a simple Tetris game (download src &lt;a href=&quot;http://kjeldahlnilsson.net/clojureTetris.zip&quot;&gt;here&lt;/a&gt;, if you wish).

&lt;object width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=14709925&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=14709925&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

What have we seen so far?

Interactive programming gives you &lt;strong&gt;fast feedback&lt;/strong&gt;. You're able to &lt;strong&gt;work faster&lt;/strong&gt; and &lt;strong&gt;write less code&lt;/strong&gt;. This is useful for &lt;strong&gt;learning and exploring&lt;/strong&gt;, for&lt;strong&gt; system administration and testing&lt;/strong&gt;, and for &lt;strong&gt;visual prototyping&lt;/strong&gt;.

Finally, have a look at the clips below. They are examples of Livecoding, where programmers and artist use interactive programming as a medium for performance art. The code and its output is improvised, sometimes in front of a live audience. Interesting example of skilled interactive programming taken to the extreme!

&lt;object width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=2433947&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=2433947&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

&lt;object width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=2502546&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=2502546&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;p&gt;

&lt;strong&gt;References:&lt;/strong&gt;

&lt;a href=&quot;http://en.wikipedia.org/wiki/Read-eval-print_loop&quot;&gt;A list of REPL environments&lt;/a&gt;

&lt;a href=&quot;http://tagaholic.me/2009/05/11/demystifying-irb-commands.html&quot;&gt;Demystifying IRB commands (interactive Ruby)&lt;/a&gt;

&lt;a href=&quot;http://slash7.com/2006/12/21/secrets-of-the-rails-console-ninjas/&quot;&gt;Secrets of the Rails Console Ninjas&lt;/a&gt;

&lt;a href=&quot;http://getfirebug.com/wiki/index.php/Console_Panel&quot;&gt;The Firebug Console Panel&lt;/a&gt;

&lt;a href=&quot;http://clojure.org/getting_started&quot;&gt;Clojure.org: 'Getting started'&lt;/a&gt;

&lt;a href=&quot;http://technomancy.us/126&quot;&gt;in which are found tricks of the trade concerning clojure authorship&lt;/a&gt;

&lt;a href=&quot;http://wiki.github.com/ztellman/penumbra/getting-started&quot;&gt;Penumbra OpenGL framework: 'Getting started'&lt;/a&gt;

&lt;a href=&quot;http://impromptu.moso.com.au/resources.html&quot;&gt;Impromptu livecoding environment introduction&lt;/a&gt;

&lt;a href=&quot;http://impromptu.moso.com.au/gallery.html&quot;&gt;Andrew Sorenson livecoding videos&lt;/a&gt;</column>
            <column name="post_title">Interactive Programming for Fun and Profit</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">interactive-programming-for-fun-and-profit</column>
            <column name="to_ping"></column>
            <column name="pinged">
http://slash7.com/2006/12/21/secrets-of-the-rails-console-ninjas/</column>
            <column name="post_modified">2010-09-14 18:03:22</column>
            <column name="post_modified_gmt">2010-09-14 17:03:22</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1496</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">4</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1510</column>
            <column name="post_author">1</column>
            <column name="post_date">2010-12-06 20:22:46</column>
            <column name="post_date_gmt">2010-12-06 19:22:46</column>
            <column name="post_content">So &lt;strong&gt;I blew 150$ on a new keyboard recently&lt;/strong&gt;. Was it worth it?

I've used a desktop Apple keyboard for a while, but never really got comfortable with it. It was just... off. I felt slower than I should, and never got used to the shape and feedback of the keys.

I've had my eye on the more classic, mechanical IBM Model-M style keyboards for a while. Jeff Atwoods &lt;a title=&quot;The Keyboard Cult&quot; href=&quot;http://www.codinghorror.com/blog/2010/10/the-keyboard-cult.html&quot;&gt;recent blog post&lt;/a&gt; finally pushed me over the edge. I ended up with this: the &lt;a href=&quot;http://www.daskeyboard.com/model-s-ultimate/&quot;&gt;Das Keyboard Model S Ultimate&lt;/a&gt;.
&lt;p style=&quot;text-align: left;&quot;&gt;&lt;a href=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/12/dasKeyboard1.jpg&quot;&gt;&lt;img class=&quot;aligncenter size-full wp-image-1512&quot; title=&quot;dasKeyboardLarge&quot; src=&quot;http://kjeldahlnilsson.net/blog/wp-content/uploads/2010/12/dasKeyboard1.jpg&quot; alt=&quot;&quot; width=&quot;515&quot; height=&quot;216&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;After a month of use I'm really happy with it. My typing speed has gone from 70-ish to 85-ish words per minute, and I &lt;strong&gt;love&lt;/strong&gt; the feel of it.&lt;/p&gt;
&lt;p style=&quot;text-align: left;&quot;&gt;It may not be for everyone, though. Here's my summary:&lt;/p&gt;
&lt;strong&gt;Pros:&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;The keys have a  great, tactile feedback. I really like the old-school mechanical &quot;CLICK-CLACK&quot; feedback, it's much crisper than anything else I've used for the last decade.&lt;/li&gt;
	&lt;li&gt;Solid build quality. It feels three times as heavy as my old Apple aluminum keyboard.&lt;/li&gt;
	&lt;li&gt;Cool aesthetics. I mean, just look at it! It's as if Batman and Darth Vader got together to design computer hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;Cons:&lt;/strong&gt;
&lt;ul&gt;
	&lt;li&gt;It has a shiny finish. Looks good... but stains really easily. I had fingermarks all over it after a few hours.&lt;/li&gt;
	&lt;li&gt;It's &lt;em&gt;loud&lt;/em&gt;. Really loud. &lt;em&gt;&quot;Wake up your child sleeping in the next room&quot;&lt;/em&gt;-loud. I'm not kidding about his: my office is way down in the basement of our house. My Significant Other can hear me loud and clear upstairs when I'm working.&lt;/li&gt;
&lt;/ul&gt;
&lt;strong&gt;All in all: If you have the money, are considering an old-school keyboard and don't mind the noise, go for it!&lt;/strong&gt;</column>
            <column name="post_title">Tools Matter: Das Keyboard Mini-review</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">tools-matter-das-keyboard-mini-review</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2010-12-06 20:24:01</column>
            <column name="post_modified_gmt">2010-12-06 19:24:01</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1510</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
        <table name="wp_posts">
            <column name="ID">1519</column>
            <column name="post_author">1</column>
            <column name="post_date">2011-03-25 10:40:56</column>
            <column name="post_date_gmt">2011-03-25 09:40:56</column>
            <column name="post_content">&lt;em&gt;Originally performed in front of a live audience at the Go Open 2011 / Communities in Action event in Oslo.&lt;/em&gt;

A &lt;a title=&quot;Code Kata&quot; href=&quot;http://codekata.pragprog.com/&quot;&gt;code kata&lt;/a&gt; is a simple exercise used to sharpen programming skills. You only actually practice problem solving the very first time you perform the kata. Then you repeat, and repeat again. And again. The objective of the exercise is to practice speed, technique and tools.

In the following clip I implement a variant of the &lt;a title=&quot;Minesweeper code kata&quot; href=&quot;http://codingdojo.org/cgi-bin/wiki.pl?KataMinesweeper&quot;&gt;Minesweeper&lt;/a&gt; code kata in JavaScript.

(Run it in fullscreen to see the code more clearly)

&lt;object width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;param name=&quot;allowfullscreen&quot; value=&quot;true&quot; /&gt;&lt;param name=&quot;allowscriptaccess&quot; value=&quot;always&quot; /&gt;&lt;param name=&quot;movie&quot; value=&quot;http://vimeo.com/moogaloop.swf?clip_id=21474244&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; /&gt;&lt;embed src=&quot;http://vimeo.com/moogaloop.swf?clip_id=21474244&amp;amp;server=vimeo.com&amp;amp;show_title=1&amp;amp;show_byline=1&amp;amp;show_portrait=1&amp;amp;color=00ADEF&amp;amp;fullscreen=1&amp;amp;autoplay=0&amp;amp;loop=0&quot; type=&quot;application/x-shockwave-flash&quot; allowfullscreen=&quot;true&quot; allowscriptaccess=&quot;always&quot; width=&quot;640&quot; height=&quot;480&quot;&gt;&lt;/embed&gt;&lt;/object&gt;

Note: I use testdriven development through most of the process. Toward the end I drop the unit testing when I finish the visuals and gameplay logic. I could drive the whole thing with unit tests but opted for a more visually interesting ending. :)

You can &lt;a title=&quot;minesweeper code&quot; href=&quot;https://github.com/thomanil/sweeper&quot;&gt;look through the code at my github account&lt;/a&gt;. Each commit in the repo is separate exercise done from scratch.

Libraries and tools used:
&lt;ul&gt;
	&lt;li&gt;&lt;a title=&quot;Underscore.js library&quot; href=&quot;http://documentcloud.github.com/underscore/&quot;&gt;Underscore.js&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;jQuery framework&quot; href=&quot;http://jquery.com/&quot;&gt;jQuery&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;Grid.js library&quot; href=&quot;https://github.com/thomanil/Grid&quot;&gt;Grid.js&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a title=&quot;clAutotest tool&quot; href=&quot;https://github.com/thomanil/clAutotest&quot;&gt;clAutotest&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href=&quot;http://macromates.com/&quot;&gt;TextMate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</column>
            <column name="post_title">How To Create a Minesweeper Game With TestDriven JavaScript in Less Than 14 Minutes</column>
            <column name="post_category">0</column>
            <column name="post_excerpt"></column>
            <column name="post_status">publish</column>
            <column name="comment_status">open</column>
            <column name="ping_status">open</column>
            <column name="post_password"></column>
            <column name="post_name">how-to-create-minesweeper-with-javascript-in-less-than-15-minutes</column>
            <column name="to_ping"></column>
            <column name="pinged"></column>
            <column name="post_modified">2011-03-25 13:57:45</column>
            <column name="post_modified_gmt">2011-03-25 12:57:45</column>
            <column name="post_content_filtered"></column>
            <column name="post_parent">0</column>
            <column name="guid">http://messynotebook.com/?p=1519</column>
            <column name="menu_order">0</column>
            <column name="post_type">post</column>
            <column name="post_mime_type"></column>
            <column name="comment_count">2</column>
        </table>
    </database>
</pma_xml_export>