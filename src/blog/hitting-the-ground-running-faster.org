#+TITLE:     Hitting the ground running... faster
#+EMAIL:     thomas@kjeldahlnilsson.net
#+DATE:      23.05.2006
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS: H:3 num:nil toc:nil @:t ::t |:t ^:t -:t f:t *:t <:t 
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:
#+LINK_HOME:
#+XSLT:

#+BEGIN_HTML
<p>  I was recently dropped into a project which has been running for while. After digging into the code and documentation I started thinking about just that process: what are the most effective ways of getting up to speed in an unfamiliar project?</p>

<p>
Few projects employ the complete UML arsenal of documentation... so once you've skimmed the (usually incomplete) documentation, you have to actually start digging. Some ways of doing this, in no particular order:
<ul>
	<li>Run through the unit tests of the most vital parts of the code. Pull out as much information as possible. Turn up log levels, add trace statements if few or none exist. You can save time by using <a href="http://en.wikipedia.org/wiki/Aspect_oriented_programming">AOP</a> mechanisms to weave in tracing.</li>
	<li>Start fixing existing bugs quickly... but carefully (if test coverage is low).</li>
	<li>Fix broken unit tests. Improve test coverage, code some "learning tests".</li>
	<li>Use tools to visualize the project. A tool like <a href="http://www.ggtools.net/grand/">Grand</a> is invaluable when digging through an unfamiliar Ant build script.</li>
	<li>Use tools that analyze code quality and the general project integrity. Some things can be determined quantitatively: test coverage, code duplication and such. Tools like <a href="http://xradar.sourceforge.net/">XRadar</a> can spot these things for you.You'll learn while digging through this information, and hopefully be better armed to improve the project when you start writing your own code. Also, if you are able to do it tactfully without stepping on any toes, offer to refactor any especially weak areas.</li>
	<li>Unless you are the sole developer, <a href="http://extremeprogramming.org/rules/pair.html">pair up </a>with one of the others. You drive and the (within the project context) more experienced developer navigates.</li>
	<li> If pairing isn't an option, get short and focused one-on-one braindumps from other people in the project. Pull up some important and/or complicated use cases, and step through their actual code together. <a href="http://en.wikipedia.org/wiki/Mind_map/">Mindmaps</a> are great for taking notes (<a href="http://freemind.sourceforge.net/wiki/index.php/Main_Page">Freemind</a> is a good open source mindmapping program). When using mind maps you are (well, at least I am) more able to organize your thoughts in a tree structure. Branches can be nested, folded and rearranged quickly - this is great because you'll probably bounce around different concepts quickly while walking through the code; "Oh yeah, I almost forgot, you should know [fact X] about [class Y that we covered 5 minutes ago]...."</li>
	<li>Improve documentation. This is a good learning excercise if there are vital areas in the project which are completely void of documentation. Boring, but forces you to understand the things you are describing.</li>
</ul></p>

<p>I probably forgot a bunch of stuff here. I implore any visitors to add more in the comment section. :)</p>
#+END_HTML
